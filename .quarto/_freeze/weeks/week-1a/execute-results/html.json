{
  "hash": "a80f642a7c2cead961e0ef2e1333fba6",
  "result": {
    "markdown": "---\ntitle: \"Introduction to Python Programming\"\ncode-copy: true\ncode-line-numbers: true\ntidy: true\n---\n\n## Learning objectives\n\n-   understand the basics of Python programming\n\n-   Understand data types and objects\n\n-   understand Python functions\n\n## Reading\n\n-   \n\n## Basics of Python\n\nIn the previous section, we showed the layout of RStudio. For this lesson, you will write all the code in the scripts/source and see the output in the console. To comment on the code, you will use the hashtag (`#`) to tell R not to execute the line as a code.\n\nR can be used as a calculator:\n\n::: {.cell results='asis' execution_count=1}\n``` {.python .cell-code}\nprint(4 + 7) \n\nprint(9 * 6) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n11\n54\n```\n:::\n:::\n\n\n### Arithmetic Operators\n\n| Description    | Operator | Example |\n|----------------|----------|---------|\n| Addition       | \\+       | 1 + 3   |\n| Subtract       | \\-       | 90 - 5  |\n| Multiplication | \\*       | 6 \\* 7  |\n| Exponentiation | **       | 3 \\^ 6  |\n| Division       | /        | 54 / 7  |\n\n\nType in and run the above examples in the script or console. \n\n### Assigning variables \n\nNotice that we have been running previous codes without assigning them to a variable. We can assign anything to a variable (`=`); this can be a plot, a variable, a table, etc. \n\nSay we ages of two individuals: Thembi's age is 30 and Sipho's age is 20. You can assign their ages to a variable:\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nthembi_age = 30\n\nsipho_age = 20\n```\n:::\n\n\nYou can use `print()` function to get the results\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nprint(thembi_age)\n\nprint(sipho_age)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n30\n20\n```\n:::\n:::\n\n\nBecause you have stored/assigned these into variables, you can calculate, let's say, total, differences, multiplication, etc. Get the sum of ages:\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nsipho_age + thembi_age\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\n50\n```\n:::\n:::\n\n\nGet age differences:\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nthembi_age - sipho_age\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\n10\n```\n:::\n:::\n\n\nMultiply these ages:\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nthembi_age * sipho_age\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\n600\n```\n:::\n:::\n\n\nBasically, we have crated variables: `sipho_age` and `thembi_age`, and stored their ages in numbers there. **always remember this**:\n\n- a variable name is case sensitive: if you have named it `sipho_age`, when you type `Sipho_age` there will be an error:\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nprint(Sipho_age)\n```\n\n::: {.cell-output .cell-output-error}\n```\nNameError: name 'Sipho_age' is not defined\n```\n:::\n:::\n\n\n### Data types in Python\n\nWhile there many data types in Python, in this course, we will focus on the most common: \n\nThere 3 basic data types in R\n\n- **numeric**: \n    - int: integers eg. (1, 2, 6, 90)\n    - float: with decimal e.g. (1.2, 5.3, 8.4)\n\n- **string**: `str`. This is text data, for axample, \"My name is Aubrey\"\n\n- **boolean**: `bool`. TRUE/FALSE\n\n\n#### Strings\n\nStrings are character data types, alwways surrounded by quoates: either single quotes (`''`) or double quotes (`\"\"`)\n\n\nExample of a **string**  variables:\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\nriver = \"Tugela river\"\n\nprint(river)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTugela river\n```\n:::\n:::\n\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\ncountry  = \"South Africa\"\n\nprint(country)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSouth Africa\n```\n:::\n:::\n\n\nNotice that a string need to be surrounded by (\"\") every time, otherwise Python will return an error\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\nriver = Tugela_river\n```\n\n::: {.cell-output .cell-output-error}\n```\nNameError: name 'Tugela_river' is not defined\n```\n:::\n:::\n\n\nThere are various basic analysis we can apply to string. For example, you may add two string:\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\nname = \"Peter\"\n\nsurname = \"Zulu\"\n\n### Add to strings\n\nprint(name + surname)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nPeterZulu\n```\n:::\n:::\n\n\nYou can leave spaces between when adding two string variables:\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\nprint(name + \" \" + surname)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nPeter Zulu\n```\n:::\n:::\n\n\nYou can convert to strings to upper or lower cases by using `.upper()` and `.lower()` functions, respectively:\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\nname.upper() \n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\n'PETER'\n```\n:::\n:::\n\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\nsurname.lower()\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\n'zulu'\n```\n:::\n:::\n\n\nHow long is the string? You can find out by using `len()` function:\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\nlen(name)\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```\n5\n```\n:::\n:::\n\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\nlen(surname)\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```\n4\n```\n:::\n:::\n\n\n#### Numeric data\n\nNumeric data represent numerical values, they can be either:\n\n- interger: whole numbers (e.g. 1, 30, 5, 90) or \n\n- float: numbers with decimals (e.g. 1.2, 4.7...)\n\nFor example we may create a variables of river lenght and depth in kilometers\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\nriver_length_km = 531\nprint(river_length_km)\n\nriver_depth_km = 0.15\nprint(river_depth_km)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n531\n0.15\n```\n:::\n:::\n\n\nThere are many functions that can be used to analyse numeric data, for example, we may add two numeric variables:\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\nprint(river_length_km + river_depth_km)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n531.15\n```\n:::\n:::\n\n\nYou can multiply:\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\nprint(river_depth_km * river_depth_km)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0.0225\n```\n:::\n:::\n\n\nNumeric data does not to need to be surrounded by `\" \"`, if you do, they will be stored as a string. \n\n### Boolean\n\nBoolean data takes two possible values:`True` or `False`.\nAn example of a logical data type:\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\nis_male = True\n\nprint(is_male) \n\nis_female = False\n\nprint(is_female) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTrue\nFalse\n```\n:::\n:::\n\n\nIn many cases, booleans are used to evaluate conditions:\n\n- `==`: Equal to\n- `!=`: Not equal to\n- `<`: Less than\n- `>`: Greater than\n- `<=`: Less than or equal to\n- `>=`: Greater than or equal to\n\n::: {.cell execution_count=21}\n``` {.python .cell-code}\nage = 45\n\nprint(age == 45)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTrue\n```\n:::\n:::\n\n\n::: {.cell execution_count=22}\n``` {.python .cell-code}\nage = 45\nprint(age > 50)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFalse\n```\n:::\n:::\n\n\n::: {.cell execution_count=23}\n``` {.python .cell-code}\nage = 45\nprint(age > 50)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFalse\n```\n:::\n:::\n\n\n::: {.cell execution_count=24}\n``` {.python .cell-code}\nage = 45\n\nif age > 34:\n    print(\"This person is an adult\")\nelse: \n        print(\"You are young\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThis person is an adult\n```\n:::\n:::\n\n\n#### What type?\n\nYou can ask python to tell you the type of the data structure by using `type()` function:\n\n::: {.cell execution_count=25}\n``` {.python .cell-code}\nriver_length_km = 531\nprint(type(river_length_km))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'int'>\n```\n:::\n:::\n\n\nThe `river_lenght_km` variable is an integer\n\n::: {.cell execution_count=26}\n``` {.python .cell-code}\nriver_name = \"Tugela\"\n\nprint(type(river_name))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'str'>\n```\n:::\n:::\n\n\n::: {.cell execution_count=27}\n``` {.python .cell-code}\nis_female = False\n\nprint(type(is_female))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'bool'>\n```\n:::\n:::\n\n\nIn this section, you have learnt basic data types, functions and operators. Next, we learn different type of data structures. \n\n",
    "supporting": [
      "week-1a_files"
    ],
    "filters": [],
    "includes": {}
  }
}