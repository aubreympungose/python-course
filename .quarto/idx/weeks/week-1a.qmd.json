{"title":"Introduction to Python Programming","markdown":{"yaml":{"title":"Introduction to Python Programming","code-copy":true,"code-line-numbers":true,"tidy":true},"headingText":"Learning objectives","containsRefs":false,"markdown":"\n\n\n-   understand the basics of Python programming\n\n-   Understand data types and objects\n\n-   understand Python functions\n\n## Reading\n\n-   \n\n## Basics of Python\n\nIn the previous section, we showed the layout of RStudio. For this lesson, you will write all the code in the scripts/source and see the output in the console. To comment on the code, you will use the hashtag (`#`) to tell R not to execute the line as a code.\n\nR can be used as a calculator:\n\n```{python R calculator}\n#| results: asis\nprint(4 + 7) \n\nprint(9 * 6) \n\n```\n\n### Arithmetic Operators\n\n| Description    | Operator | Example |\n|----------------|----------|---------|\n| Addition       | \\+       | 1 + 3   |\n| Subtract       | \\-       | 90 - 5  |\n| Multiplication | \\*       | 6 \\* 7  |\n| Exponentiation | **       | 3 \\^ 6  |\n| Division       | /        | 54 / 7  |\n\n\nType in and run the above examples in the script or console. \n\n### Assigning variables \n\nNotice that we have been running previous codes without assigning them to a variable. We can assign anything to a variable (`=`); this can be a plot, a variable, a table, etc. \n\nSay we ages of two individuals: Thembi's age is 30 and Sipho's age is 20. You can assign their ages to a variable:\n\n```{python Assigning}\nthembi_age = 30\n\nsipho_age = 20\n```\n\nYou can use `print()` function to get the results\n\n```{python}\nprint(thembi_age)\n\nprint(sipho_age)\n```\n\nBecause you have stored/assigned these into variables, you can calculate, let's say, total, differences, multiplication, etc. Get the sum of ages:\n\n```{python}\nsipho_age + thembi_age\n```\n\nGet age differences:\n\n```{python}\n\nthembi_age - sipho_age\n```\n\nMultiply these ages:\n\n```{python}\nthembi_age * sipho_age\n```\n\nBasically, we have crated variables: `sipho_age` and `thembi_age`, and stored their ages in numbers there. **always remember this**:\n\n- a variable name is case sensitive: if you have named it `sipho_age`, when you type `Sipho_age` there will be an error:\n\n```{python}\n#| error: true\nprint(Sipho_age)\n```\n\n\n### Data types in Python\n\nWhile there many data types in Python, in this course, we will focus on the most common: \n\nThere 3 basic data types in R\n\n- **numeric**: \n    - int: integers eg. (1, 2, 6, 90)\n    - float: with decimal e.g. (1.2, 5.3, 8.4)\n\n- **string**: `str`. This is text data, for axample, \"My name is Aubrey\"\n\n- **boolean**: `bool`. TRUE/FALSE\n\n\n#### Strings\n\nStrings are character data types, alwways surrounded by quoates: either single quotes (`''`) or double quotes (`\"\"`)\n\n\nExample of a **string**  variables:\n\n```{python characters}\nriver = \"Tugela river\"\n\nprint(river)\n```\n\n\n```{python}\ncountry  = \"South Africa\"\n\nprint(country)\n```\n\n\n\nNotice that a string need to be surrounded by (\"\") every time, otherwise Python will return an error\n\n\n```{python}\n#| error: true\n\nriver = Tugela_river\n```\n\nThere are various basic analysis we can apply to string. For example, you may add two string:\n\n```{python}\nname = \"Peter\"\n\nsurname = \"Zulu\"\n\n### Add to strings\n\nprint(name + surname)\n\n```\n\nYou can leave spaces between when adding two string variables:\n\n```{python}\nprint(name + \" \" + surname)\n```\n\nYou can convert to strings to upper or lower cases by using `.upper()` and `.lower()` functions, respectively:\n\n```{python}\nname.upper() \n```\n\n\n```{python}\nsurname.lower()\n```\n\nHow long is the string? You can find out by using `len()` function:\n\n```{python}\nlen(name)\n```\n\n```{python}\nlen(surname)\n```\n\n\n#### Numeric data\n\nNumeric data represent numerical values, they can be either:\n\n- interger: whole numbers (e.g. 1, 30, 5, 90) or \n\n- float: numbers with decimals (e.g. 1.2, 4.7...)\n\nFor example we may create a variables of river lenght and depth in kilometers\n\n```{python nemricals}\nriver_length_km = 531\nprint(river_length_km)\n\nriver_depth_km = 0.15\nprint(river_depth_km)\n```\n\nThere are many functions that can be used to analyse numeric data, for example, we may add two numeric variables:\n\n```{python}\nprint(river_length_km + river_depth_km)\n```\n\nYou can multiply:\n\n```{python}\n\nprint(river_depth_km * river_depth_km)\n```\n\nNumeric data does not to need to be surrounded by `\" \"`, if you do, they will be stored as a string. \n\n### Boolean\n\nBoolean data takes two possible values:`True` or `False`.\nAn example of a logical data type:\n\n```{python logical}\nis_male = True\n\nprint(is_male) \n\nis_female = False\n\nprint(is_female) \n```\n\nIn many cases, booleans are used to evaluate conditions:\n\n- `==`: Equal to\n- `!=`: Not equal to\n- `<`: Less than\n- `>`: Greater than\n- `<=`: Less than or equal to\n- `>=`: Greater than or equal to\n\n```{python}\nage = 45\n\nprint(age == 45)\n```\n\n\n\n```{python}\nage = 45\nprint(age > 50)\n```\n\n```{python}\nage = 45\nprint(age > 50)\n```\n\n```{python}\nage = 45\n\nif age > 34:\n    print(\"This person is an adult\")\nelse: \n        print(\"You are young\")\n```\n\n\n#### What type?\n\nYou can ask python to tell you the type of the data structure by using `type()` function:\n\n```{python class}\nriver_length_km = 531\nprint(type(river_length_km))\n```\n\nThe `river_lenght_km` variable is an integer\n\n```{python}\nriver_name = \"Tugela\"\n\nprint(type(river_name))\n```\n\n\n```{python}\nis_female = False\n\nprint(type(is_female))\n```\n\nIn this section, you have learnt basic data types, functions and operators. Next, we learn different type of data structures. ","srcMarkdownNoYaml":"\n\n## Learning objectives\n\n-   understand the basics of Python programming\n\n-   Understand data types and objects\n\n-   understand Python functions\n\n## Reading\n\n-   \n\n## Basics of Python\n\nIn the previous section, we showed the layout of RStudio. For this lesson, you will write all the code in the scripts/source and see the output in the console. To comment on the code, you will use the hashtag (`#`) to tell R not to execute the line as a code.\n\nR can be used as a calculator:\n\n```{python R calculator}\n#| results: asis\nprint(4 + 7) \n\nprint(9 * 6) \n\n```\n\n### Arithmetic Operators\n\n| Description    | Operator | Example |\n|----------------|----------|---------|\n| Addition       | \\+       | 1 + 3   |\n| Subtract       | \\-       | 90 - 5  |\n| Multiplication | \\*       | 6 \\* 7  |\n| Exponentiation | **       | 3 \\^ 6  |\n| Division       | /        | 54 / 7  |\n\n\nType in and run the above examples in the script or console. \n\n### Assigning variables \n\nNotice that we have been running previous codes without assigning them to a variable. We can assign anything to a variable (`=`); this can be a plot, a variable, a table, etc. \n\nSay we ages of two individuals: Thembi's age is 30 and Sipho's age is 20. You can assign their ages to a variable:\n\n```{python Assigning}\nthembi_age = 30\n\nsipho_age = 20\n```\n\nYou can use `print()` function to get the results\n\n```{python}\nprint(thembi_age)\n\nprint(sipho_age)\n```\n\nBecause you have stored/assigned these into variables, you can calculate, let's say, total, differences, multiplication, etc. Get the sum of ages:\n\n```{python}\nsipho_age + thembi_age\n```\n\nGet age differences:\n\n```{python}\n\nthembi_age - sipho_age\n```\n\nMultiply these ages:\n\n```{python}\nthembi_age * sipho_age\n```\n\nBasically, we have crated variables: `sipho_age` and `thembi_age`, and stored their ages in numbers there. **always remember this**:\n\n- a variable name is case sensitive: if you have named it `sipho_age`, when you type `Sipho_age` there will be an error:\n\n```{python}\n#| error: true\nprint(Sipho_age)\n```\n\n\n### Data types in Python\n\nWhile there many data types in Python, in this course, we will focus on the most common: \n\nThere 3 basic data types in R\n\n- **numeric**: \n    - int: integers eg. (1, 2, 6, 90)\n    - float: with decimal e.g. (1.2, 5.3, 8.4)\n\n- **string**: `str`. This is text data, for axample, \"My name is Aubrey\"\n\n- **boolean**: `bool`. TRUE/FALSE\n\n\n#### Strings\n\nStrings are character data types, alwways surrounded by quoates: either single quotes (`''`) or double quotes (`\"\"`)\n\n\nExample of a **string**  variables:\n\n```{python characters}\nriver = \"Tugela river\"\n\nprint(river)\n```\n\n\n```{python}\ncountry  = \"South Africa\"\n\nprint(country)\n```\n\n\n\nNotice that a string need to be surrounded by (\"\") every time, otherwise Python will return an error\n\n\n```{python}\n#| error: true\n\nriver = Tugela_river\n```\n\nThere are various basic analysis we can apply to string. For example, you may add two string:\n\n```{python}\nname = \"Peter\"\n\nsurname = \"Zulu\"\n\n### Add to strings\n\nprint(name + surname)\n\n```\n\nYou can leave spaces between when adding two string variables:\n\n```{python}\nprint(name + \" \" + surname)\n```\n\nYou can convert to strings to upper or lower cases by using `.upper()` and `.lower()` functions, respectively:\n\n```{python}\nname.upper() \n```\n\n\n```{python}\nsurname.lower()\n```\n\nHow long is the string? You can find out by using `len()` function:\n\n```{python}\nlen(name)\n```\n\n```{python}\nlen(surname)\n```\n\n\n#### Numeric data\n\nNumeric data represent numerical values, they can be either:\n\n- interger: whole numbers (e.g. 1, 30, 5, 90) or \n\n- float: numbers with decimals (e.g. 1.2, 4.7...)\n\nFor example we may create a variables of river lenght and depth in kilometers\n\n```{python nemricals}\nriver_length_km = 531\nprint(river_length_km)\n\nriver_depth_km = 0.15\nprint(river_depth_km)\n```\n\nThere are many functions that can be used to analyse numeric data, for example, we may add two numeric variables:\n\n```{python}\nprint(river_length_km + river_depth_km)\n```\n\nYou can multiply:\n\n```{python}\n\nprint(river_depth_km * river_depth_km)\n```\n\nNumeric data does not to need to be surrounded by `\" \"`, if you do, they will be stored as a string. \n\n### Boolean\n\nBoolean data takes two possible values:`True` or `False`.\nAn example of a logical data type:\n\n```{python logical}\nis_male = True\n\nprint(is_male) \n\nis_female = False\n\nprint(is_female) \n```\n\nIn many cases, booleans are used to evaluate conditions:\n\n- `==`: Equal to\n- `!=`: Not equal to\n- `<`: Less than\n- `>`: Greater than\n- `<=`: Less than or equal to\n- `>=`: Greater than or equal to\n\n```{python}\nage = 45\n\nprint(age == 45)\n```\n\n\n\n```{python}\nage = 45\nprint(age > 50)\n```\n\n```{python}\nage = 45\nprint(age > 50)\n```\n\n```{python}\nage = 45\n\nif age > 34:\n    print(\"This person is an adult\")\nelse: \n        print(\"You are young\")\n```\n\n\n#### What type?\n\nYou can ask python to tell you the type of the data structure by using `type()` function:\n\n```{python class}\nriver_length_km = 531\nprint(type(river_length_km))\n```\n\nThe `river_lenght_km` variable is an integer\n\n```{python}\nriver_name = \"Tugela\"\n\nprint(type(river_name))\n```\n\n\n```{python}\nis_female = False\n\nprint(type(is_female))\n```\n\nIn this section, you have learnt basic data types, functions and operators. Next, we learn different type of data structures. "},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":true,"code-line-numbers":true,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","filters":["../include-files.lua","quarto"],"css":["../styles.css"],"toc":true,"output-file":"week-1a.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.433","theme":{"light":"cosmo","dark":["cosmo","../theme-dark.scss"]},"code-background":true,"code-copy":true,"title":"Introduction to Python Programming","tidy":true},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}