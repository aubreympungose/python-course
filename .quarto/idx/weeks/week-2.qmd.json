{"title":"3 Data Visualisation","markdown":{"yaml":{"title":"3 Data Visualisation","code-copy":true,"code-line-numbers":true,"tidy":true,"code-annotations":true},"headingText":"**Before We Begin**","containsRefs":false,"markdown":"\n\n\n## Base R vs External Packages\n\n\nUntil now, we have used functions within **Base R**, which are already installed in R. While Base/bulit-in R functions are important, however, in many cases, we want to use external packages to do any task we want. This also applies in other programming languages like Python. For example, if we want to do spatial and GIS analysis, we can install the `sf` package; for machine learning, we can use `caret` and `tidymodels` packages. There are over 2 000 R packages, contributed by different individuals around the world, and they are stored and curated in the [CRAN website](https://cran.r-project.org/web/packages/). In most of the cases, you will be working with external packages. \n\nOne of the most popular packages in R is the `tidyverse` meta-package, which include a collection of packages for working with data; some of packages in the `tidyverse` are:\n\n- `dplyr`: for data cleaning, wrangling and transformation\n\n- `ggplot2`: for data visualisation\n\n- `tidyr`: for tidying up data\n\n- `readr`: for importing data\n\n- `purrr`: for advanced functional programming\n\n- `stringr`: for manipulating string/text data\n\nThere are other packages in the `tidyverse`. The philosophy of `tidyverse` is *tidy* data:\n\n> 1.  Each variable is a column; each column is a variable.\n> 2.  Each observation is row; each row is an observation.\n> 3.  Each value is a cell; each cell is a single value. [@r_4_ds]\n\n\n![Tidy data](images/tidy_data_2.png)\n\nTidy data is a principle we are going to stick on through this course:\n\n![Tidy data @wickham_tidyverse_2019](images/tidy_data.png)\n\nSo all in all, tidyverse make it easier to work with dataframes and most people prefer it than base R functions. We will use an example at the end to understand the differences between Base R and `tydiverse.` You will need to install the package first. In R you install a package by calling `install.package()` function:\n\n```{r install tidyverse, eval=F, echo=T}\ninstall.packages(\"tidyverse\")\n```\n\nWhenever you need to use an external package and its functions, you first need to load it using `library()` function. In our case, we want to load the tidyverse package we have just installed:\n\n```{r load tidyverse, warning = FALSE}\nlibrary(tidyverse)\n```\n\nYou will load other packages like this.\n\n\n## 3.1 Introduction to data visualisation\n\nData visualisation is an important skill for data scientists. In fact, data manipulation and visualisations go hand in hand. Before any analysis, it is important to visualise data to explore its distribution, relationships, normality, etc.\n\nIn this section, we will use the `ggplot2` package within `tidyverse` to learn the foundations of data visualisation. The `ggplot2` package got it philosophy from the book _The Grammar of Graphics_, written by  Leland Wilkinson. The `ggplot2` package was developed by Hadley Wickham, probably one of the most greatest data scientist in this era. \n\nWe will be working with the `gapminder` dataset, which is the real world data. You will need to install its first because it comes as a package:\n\n```{r gapminder, eval=FALSE, echo=TRUE}\ninstall.packages(\"gapminder\")\n```\n\nAfter installing the `gapminder` data, you will have to load it using `library` function:\n\n```{r load gapminder}\nlibrary(gapminder)\n```\n\nRemember that we said everything we create is an object and we need to assign it? Let us assign `gapminder` that and name simply as `gapminder` using the `<-` operator:\n\n```{r}\ngapminder <- gapminder\n\n```\n\n\nExplore the data first;  how many columns and rows are in `gapminder` dataframe? We will use `str()` function:\n\n```{r}\nstr(gapminder)\n```\n\nWe can see that `gapminder` has `r ncol(gapminder)` and `r nrow(gapminder)`. The columns in the dataset are:\n\n- country: Simply the country\n\n- continent: Continent\n\n- year: The year data was collected\n\n- lifeExp: Life expectancy of a country in year\n\n- pop: Population of the country in a year\n\n- gdpPercap: Gross Domestic Product of a country in a year\n\n\n`ggplot2` has steps/processes you follow to create a plot. Let us illustrate using the `gapminder` dataset. Load `ggplot2` package first:\n\n```{r ggplot-intro, warning=FALSE}\nlibrary(ggplot2)\n```\n\n\nA plot created in using `ggplot2` has the following components/layers, and we will go through them step-by-step: \n\n![source](images/ggplot_elements.png)\n\n## 3.2 Create a plot\nFrom the `ggapminder` dataframe, we will create a scatterplot of life expectancy and GDP per capita, and add all the components of ggplot step-by-step. \n\n### 3.2.1 Layer 1: data\n\nWe use the `ggplot()` function to add data, in this case, `gapminder` dataframe:\n\n```{r ggplot-add data}\nggplot(data = gapminder)\n```\n\n### 3.2.2 Layer 2: aesthetics\n\nAesthetics are used to allocate x and y variables, depending on the type of the plot we want to create, in this case, x variable is `gdpPercap` and y variable is `lifeExp`:\n\n```{r ggplot-add aesthetics}\nggplot(data = gapminder, aes(x = gdpPercap, y = lifeExp))\n```\n\nThere are other *aesthetics* that we can add, such as *size, colour, shape, group, etc*. We will use these later in this section.\n\n### 3.2.3 Layer 3: geometry\n\nGeometry is the type of plot/object we want to create. In our casewe want to create a scatterplot, by using `geom_point()` function:\n\n```{r ggplot-add geom}\nggplot(data = gapminder,\n    aes(x = gdpPercap, y = lifeExp)) + \n    geom_point()\n```\n\nWe now have our first plot. There other geometry types in ggplot depending on the type of data you have\n\n\n- `geom_point()` : for sactterplots\n    \n- `geom_line()` : for line plots\n    \n- `geom_histogram()` : for histogram\n    \n- `geom_area()` : for area charts\n    \n- `geom_boxplot()`  : for boxplots\n    \n- `geom_bar()` : for bar graphs\n\nIn the code above, we have three steps to create a plot:\n\n1. `ggplot(data = gapminder)`: we are simply telling ggplot that we are using gapminder dataset\n\n2. `ggplot(data = gapminder, aes(x = gdpPercap, y = lifeExp))`: we are adding *mapping aesthetics* or *aesthetics*, allocating x, y axis. \n\n3. `ggplot(data = gapminder, aes(x = gdpPercap, y = lifeExp)) + geom_point()`: We have added a geometry layer through `geoms_point()` function to create a scatterplot. \n\n\n### 3.2.4 Layer  4: Labels\n\n`ggplot2` package can handle various plot labels, including axis titles and graph titles. We can do this using `labs()` function:\n\n```{r ggplot-labels}\nggplot(data = gapminder,\n       aes(x = gdpPercap, y = lifeExp)) + \n  geom_point() +\n  labs(x = \"GDP per capita (log scale)\",\n       y = \"Life expectancy\",\n       title = \"GDP vs Life Expectancy (1952-2007)\",\n       subtitle = \"People in developed countries tend to live longer\",\n       caption = \"Data source: Gapminder\")\n```\n\n\n### 3.2.5 Facets\n\nFaceting is used when weâ€™d like to split a particular visualization by the values of another variable. This will create multiple copies of the same type of plot with matching x and y axes, but whose content will differ.\n\nWhen we one to split the plots into various sub-categories, by using a categorical variable, we use `facet_wrap()` function. For example, we may want to split the above plot by continent:\n\n```{r ggplot facet}\nggplot(data = gapminder,\n       aes(x = gdpPercap, y = lifeExp)) + \n  geom_point() +\n  facet_wrap(~continent)\n```\n\nThere are other argument that comes with `facet_wrap()` function. We can specify tghe number of rows and columns, using `nrow()` and `ncol()` functions, respectively.\n\n```{r ggplot facet2}\nggplot(data = gapminder,\n       aes(x = gdpPercap, y = lifeExp)) + \n  geom_point() +\n  facet_wrap(~continent, ncol = 5)\n```\n\n\n### 3.2.6 Transforming axis scales\n\nNotice that x-axis is not normally distributed. One of the method to use is to transform data to log10, to normnalise it:\n\n```{r ggplot scales log}\nggplot(data = gapminder,\n    aes(x = gdpPercap, y = lifeExp)) + \n    geom_point() +\n  scale_x_log10()\n```\n\nLook how it changes.\n\nThere are many scales functions and you will learn them along the way by coding and exploring ggplot.\n\n\n### 3.2.7 Returning to aeathetics\n\nWe can add other aesthetics in our plot, for example, we can allocate colour to the `continent` column:\n\n```{r ggplot aesthetics-colour}\nggplot(data = gapminder,\n    aes(x = gdpPercap, y = lifeExp, colour = continent)) + \n    geom_point() +\n  scale_x_log10()\n```\n\nNotice how countries in Europe tend to have higher GDP per capita and and higher life expectancy compared to African countries. \n\nWe can also change the shape of points in the aesthetics:\n```{r ggplot aesthetics-shape}\nggplot(data = gapminder,\n    aes(x = gdpPercap, y = lifeExp, colour = continent, shape = continent)) + \n    geom_point() +\n  scale_x_log10()\n```\n\nThere are many other aesthetics arguments that are used and they are beyond the scope of this course. It takes practice. \n\n### 3.2.8 Themes\n\nTry experimenting with different themes that comes with ggplot. `theme_minimal()` will produce a minimalist theme with less background:\n\n```{r ggplot-change theme}\nggplot(data = gapminder,\n       aes(x = gdpPercap, y = lifeExp, colour = continent)) + \n  geom_point() +\n  scale_x_log10() +\n  labs(x = \"GDP per capita (log scale)\",\n       y = \"Life expectancy\",\n       title = \"GDP vs Life Expectancy (1952-2007)\",\n       subtitle = \"People in developed countries tend to live longer\",\n       caption = \"Data source: Gapminder\") +\n  theme_minimal()\n```\n\nThere are other themes that can transform your plots to look more elegant.  \n\nYou can also choose the how fonts appear using `themes()` function:\n\n```{r ggplot-theme change font}\nggplot(data = gapminder,\n       aes(x = gdpPercap, y = lifeExp, colour = continent)) + \n  geom_point() +\n  scale_x_log10() +\n  labs(x = \"GDP per capita (log scale)\",\n       y = \"Life expectancy\",\n       title = \"GDP vs Life Expectancy (1952-2007)\",\n       subtitle = \"People in developed countries tend to live longer\",\n       caption = \"Data source: Gapminder\") +\n  theme(text = element_text(size = 15))\n```\n\nWith `themes()` function, you can remove borders, change the colour of fonts, remove the legend, etc. \n\n\n## 3.3 Visualising Numerical data\n\n### 3.3.1 Single variable\n\nFor visualising one variable, we mostly histogram, density plot, etc:\n\nCreate a histogram of GDP per capita:\n\n```{r ggplot-histogram}\nggplot(data = gapminder, aes(gdpPercap)) +\n  geom_histogram()\n```\n\nWe can see that the GDP per capita variable is skewed. Density plots are also similar to histograms:\n\n```{r ggplot-density}\nggplot(data = gapminder, aes(gdpPercap)) +\n  geom_density()\n```\n\n### 3.3.2 Visualising more than one numerical variables\n\nA scatter plot is used to show relationship between two variables\n\n```{r ggplot-scatter}\nggplot(data = gapminder, aes(x = gdpPercap, y = lifeExp)) + \n    geom_point()\n```\n\nWe can add other aeasthetics such as shape, colour etc: Let's add the colour aesthetics:\n\n```{r ggplot-scatter-colour}\nggplot(data = gapminder, aes(x = gdpPercap, y = lifeExp, colour = continent)) + \n    geom_point()\n```\n\nWe can change the add the size aesthetics and use population of the country:\n\n```{r ggplot-scatter-size}\nggplot(data = gapminder, aes(x = gdpPercap, y = lifeExp, colour = continent, size = pop)) + \n  geom_point()\n```\n\n### 3.3.3 Visualising numerical by group/category\n\nA boxplot is useful when we want to view statistics by a particular group, let say, GDP by continent:\n\n```{r ggplot-boxplot}\nggplot(data = gapminder, aes(x = continent, y = gdpPercap)) +\n  geom_boxplot()\n```\n\nWe can also use a column chart, let say, view GDP per capita by continent:\n\n```{r geom-col}\nggplot(data = gapminder, aes(x = continent, y = gdpPercap)) +\n  geom_col()\n```\n\n### 3.3.4 visualise trends\n\nWe mainly use line graphs to visualise statistics over time. Let use see how life expectancy changes over time \n\n```{r geom-line}\nggplot(data = gapminder, aes(x = year, y = lifeExp, group = country)) +\n  geom_line()\n```\n\n\nThis looks ugly, but we will learn how to create proper line plots at the end. \n\nYou can also use stacked column chart:\n\n```{r stacked column}\nggplot(data = gapminder, aes(x = year, y = pop, fill = continent)) +\n  geom_col()\n```\n\nView by continent and make it 100% stacked bar\n\n```{r stacked hundred percent}\nggplot(data = gapminder, aes(x = year, y = pop, fill = continent)) +\n  geom_col(position = \"fill\")\n```\n\nYou can make horizontal bars by using `coord_flip()`:\n\n```{r coord_flip}\nggplot(data = gapminder, aes(x = year, y = pop, fill = continent)) +\n  geom_col(position = \"fill\") +\n  coord_flip()\n```\n\n\n## 3.4 Visualising categorical/character data\n\nIn the gapminder dataset, we have two categorical columns: country and continent. One of the plot used for handling categorical data is bar chart. In ggplot, we use `geom_bar`:\n\n```{r bar-chart}\nggplot(data = gapminder, aes(x = continent)) + \n  geom_bar()\n```\n\n\n### Bonus one: Interactive charts\n\nYou can make your charts interactive by using `plotly` package, you will need to install it first\n\n```{r install plotly, eval=F, echo=T}\ninstall.packages(plotly)\n```\n\nThen load the package:\n\n```{r load plotly, warning=FALSE}\nlibrary(plotly)\n```\n\nFirst, create a plot using `ggplot()` and save it using the `<-` operator:\n\n```{r}\nfirst_plot <- ggplot(data = gapminder,\n       aes(x = gdpPercap, y = lifeExp, colour = continent)) + \n  geom_point() +\n  scale_x_log10() +\n  labs(x = \"GDP per capita (log scale)\",\n       y = \"Life expectancy\",\n       title = \"GDP vs Life Expectancy (1952-2007)\",\n       subtitle = \"People in developed countries tend to live longer\",\n       caption = \"Data source: Gapminder\") +\n  theme_minimal() \n```\n\nWe named the plot first_plot. From the `plotly` package, you going to use `ggplotly()` function and put the plot object you have created:\n\n```{r}\nggplotly(first_plot)\n```\n\nExperiment with the results, when you hoover around the plot, you can see it shows information by variable. You can select which continent to make visible by clicking on the legend. Beautiful!\n\n### Bonus Two: Animate\n\nYou can create an animated chart using the `gganimate` package. Install first:\n\n```{r install gganimate, eval=F, echo=T}\ninstall.packages(gganimate)\n```\n\nLoad the package:\n\n```{r load gganimate, warning=FALSE}\nlibrary(gganimate)\n```\n\nYou would want to see how the life expectancy and gdp per capita changes over time. First create the plot, but add few functions:\n\n\n```{r}\nanimated_plot <- ggplot(data = gapminder,\n       aes(x = gdpPercap, \n           y = lifeExp, \n           size = pop,\n           colour = continent)) + \n  geom_point() +\n  scale_x_log10() +\n  labs(x = \"GDP per capita (log scale)\",\n       y = \"Life expectancy\",\n       title = \"GDP vs Life Expectancy (1952-2007)\",\n       subtitle = 'Year: {frame_time}',\n       caption = \"Data source: Gapminder\") +\n  theme_minimal() +\n  transition_time(year) +\n  ease_aes('linear') \n\n\nanimate(animated_plot)\n```\n\nLook at the results!\n\n\nThis section introduced you to basics of data visualisation using ggplot2 package. You may need to consult the following materials for intermediate and advanced skills in data visualisation:\n\n- [Healy, K. (2018). Data visualization: a practical introduction. Princeton University Press](https://socviz.co/)\n\n- [The R Graph Gallery](https://r-graph-gallery.com/)\n\n- [R for Data Science](https://r4ds.hadley.nz/). Chapter 10-12\n\n- [Data visualisation with ggplot2: cheatsheet](https://github.com/rstudio/cheatsheets/blob/main/data-visualization-2.1.pdf)\n\n","srcMarkdownNoYaml":"\n\n## **Before We Begin**\n\n## Base R vs External Packages\n\n\nUntil now, we have used functions within **Base R**, which are already installed in R. While Base/bulit-in R functions are important, however, in many cases, we want to use external packages to do any task we want. This also applies in other programming languages like Python. For example, if we want to do spatial and GIS analysis, we can install the `sf` package; for machine learning, we can use `caret` and `tidymodels` packages. There are over 2 000 R packages, contributed by different individuals around the world, and they are stored and curated in the [CRAN website](https://cran.r-project.org/web/packages/). In most of the cases, you will be working with external packages. \n\nOne of the most popular packages in R is the `tidyverse` meta-package, which include a collection of packages for working with data; some of packages in the `tidyverse` are:\n\n- `dplyr`: for data cleaning, wrangling and transformation\n\n- `ggplot2`: for data visualisation\n\n- `tidyr`: for tidying up data\n\n- `readr`: for importing data\n\n- `purrr`: for advanced functional programming\n\n- `stringr`: for manipulating string/text data\n\nThere are other packages in the `tidyverse`. The philosophy of `tidyverse` is *tidy* data:\n\n> 1.  Each variable is a column; each column is a variable.\n> 2.  Each observation is row; each row is an observation.\n> 3.  Each value is a cell; each cell is a single value. [@r_4_ds]\n\n\n![Tidy data](images/tidy_data_2.png)\n\nTidy data is a principle we are going to stick on through this course:\n\n![Tidy data @wickham_tidyverse_2019](images/tidy_data.png)\n\nSo all in all, tidyverse make it easier to work with dataframes and most people prefer it than base R functions. We will use an example at the end to understand the differences between Base R and `tydiverse.` You will need to install the package first. In R you install a package by calling `install.package()` function:\n\n```{r install tidyverse, eval=F, echo=T}\ninstall.packages(\"tidyverse\")\n```\n\nWhenever you need to use an external package and its functions, you first need to load it using `library()` function. In our case, we want to load the tidyverse package we have just installed:\n\n```{r load tidyverse, warning = FALSE}\nlibrary(tidyverse)\n```\n\nYou will load other packages like this.\n\n\n## 3.1 Introduction to data visualisation\n\nData visualisation is an important skill for data scientists. In fact, data manipulation and visualisations go hand in hand. Before any analysis, it is important to visualise data to explore its distribution, relationships, normality, etc.\n\nIn this section, we will use the `ggplot2` package within `tidyverse` to learn the foundations of data visualisation. The `ggplot2` package got it philosophy from the book _The Grammar of Graphics_, written by  Leland Wilkinson. The `ggplot2` package was developed by Hadley Wickham, probably one of the most greatest data scientist in this era. \n\nWe will be working with the `gapminder` dataset, which is the real world data. You will need to install its first because it comes as a package:\n\n```{r gapminder, eval=FALSE, echo=TRUE}\ninstall.packages(\"gapminder\")\n```\n\nAfter installing the `gapminder` data, you will have to load it using `library` function:\n\n```{r load gapminder}\nlibrary(gapminder)\n```\n\nRemember that we said everything we create is an object and we need to assign it? Let us assign `gapminder` that and name simply as `gapminder` using the `<-` operator:\n\n```{r}\ngapminder <- gapminder\n\n```\n\n\nExplore the data first;  how many columns and rows are in `gapminder` dataframe? We will use `str()` function:\n\n```{r}\nstr(gapminder)\n```\n\nWe can see that `gapminder` has `r ncol(gapminder)` and `r nrow(gapminder)`. The columns in the dataset are:\n\n- country: Simply the country\n\n- continent: Continent\n\n- year: The year data was collected\n\n- lifeExp: Life expectancy of a country in year\n\n- pop: Population of the country in a year\n\n- gdpPercap: Gross Domestic Product of a country in a year\n\n\n`ggplot2` has steps/processes you follow to create a plot. Let us illustrate using the `gapminder` dataset. Load `ggplot2` package first:\n\n```{r ggplot-intro, warning=FALSE}\nlibrary(ggplot2)\n```\n\n\nA plot created in using `ggplot2` has the following components/layers, and we will go through them step-by-step: \n\n![source](images/ggplot_elements.png)\n\n## 3.2 Create a plot\nFrom the `ggapminder` dataframe, we will create a scatterplot of life expectancy and GDP per capita, and add all the components of ggplot step-by-step. \n\n### 3.2.1 Layer 1: data\n\nWe use the `ggplot()` function to add data, in this case, `gapminder` dataframe:\n\n```{r ggplot-add data}\nggplot(data = gapminder)\n```\n\n### 3.2.2 Layer 2: aesthetics\n\nAesthetics are used to allocate x and y variables, depending on the type of the plot we want to create, in this case, x variable is `gdpPercap` and y variable is `lifeExp`:\n\n```{r ggplot-add aesthetics}\nggplot(data = gapminder, aes(x = gdpPercap, y = lifeExp))\n```\n\nThere are other *aesthetics* that we can add, such as *size, colour, shape, group, etc*. We will use these later in this section.\n\n### 3.2.3 Layer 3: geometry\n\nGeometry is the type of plot/object we want to create. In our casewe want to create a scatterplot, by using `geom_point()` function:\n\n```{r ggplot-add geom}\nggplot(data = gapminder,\n    aes(x = gdpPercap, y = lifeExp)) + \n    geom_point()\n```\n\nWe now have our first plot. There other geometry types in ggplot depending on the type of data you have\n\n\n- `geom_point()` : for sactterplots\n    \n- `geom_line()` : for line plots\n    \n- `geom_histogram()` : for histogram\n    \n- `geom_area()` : for area charts\n    \n- `geom_boxplot()`  : for boxplots\n    \n- `geom_bar()` : for bar graphs\n\nIn the code above, we have three steps to create a plot:\n\n1. `ggplot(data = gapminder)`: we are simply telling ggplot that we are using gapminder dataset\n\n2. `ggplot(data = gapminder, aes(x = gdpPercap, y = lifeExp))`: we are adding *mapping aesthetics* or *aesthetics*, allocating x, y axis. \n\n3. `ggplot(data = gapminder, aes(x = gdpPercap, y = lifeExp)) + geom_point()`: We have added a geometry layer through `geoms_point()` function to create a scatterplot. \n\n\n### 3.2.4 Layer  4: Labels\n\n`ggplot2` package can handle various plot labels, including axis titles and graph titles. We can do this using `labs()` function:\n\n```{r ggplot-labels}\nggplot(data = gapminder,\n       aes(x = gdpPercap, y = lifeExp)) + \n  geom_point() +\n  labs(x = \"GDP per capita (log scale)\",\n       y = \"Life expectancy\",\n       title = \"GDP vs Life Expectancy (1952-2007)\",\n       subtitle = \"People in developed countries tend to live longer\",\n       caption = \"Data source: Gapminder\")\n```\n\n\n### 3.2.5 Facets\n\nFaceting is used when weâ€™d like to split a particular visualization by the values of another variable. This will create multiple copies of the same type of plot with matching x and y axes, but whose content will differ.\n\nWhen we one to split the plots into various sub-categories, by using a categorical variable, we use `facet_wrap()` function. For example, we may want to split the above plot by continent:\n\n```{r ggplot facet}\nggplot(data = gapminder,\n       aes(x = gdpPercap, y = lifeExp)) + \n  geom_point() +\n  facet_wrap(~continent)\n```\n\nThere are other argument that comes with `facet_wrap()` function. We can specify tghe number of rows and columns, using `nrow()` and `ncol()` functions, respectively.\n\n```{r ggplot facet2}\nggplot(data = gapminder,\n       aes(x = gdpPercap, y = lifeExp)) + \n  geom_point() +\n  facet_wrap(~continent, ncol = 5)\n```\n\n\n### 3.2.6 Transforming axis scales\n\nNotice that x-axis is not normally distributed. One of the method to use is to transform data to log10, to normnalise it:\n\n```{r ggplot scales log}\nggplot(data = gapminder,\n    aes(x = gdpPercap, y = lifeExp)) + \n    geom_point() +\n  scale_x_log10()\n```\n\nLook how it changes.\n\nThere are many scales functions and you will learn them along the way by coding and exploring ggplot.\n\n\n### 3.2.7 Returning to aeathetics\n\nWe can add other aesthetics in our plot, for example, we can allocate colour to the `continent` column:\n\n```{r ggplot aesthetics-colour}\nggplot(data = gapminder,\n    aes(x = gdpPercap, y = lifeExp, colour = continent)) + \n    geom_point() +\n  scale_x_log10()\n```\n\nNotice how countries in Europe tend to have higher GDP per capita and and higher life expectancy compared to African countries. \n\nWe can also change the shape of points in the aesthetics:\n```{r ggplot aesthetics-shape}\nggplot(data = gapminder,\n    aes(x = gdpPercap, y = lifeExp, colour = continent, shape = continent)) + \n    geom_point() +\n  scale_x_log10()\n```\n\nThere are many other aesthetics arguments that are used and they are beyond the scope of this course. It takes practice. \n\n### 3.2.8 Themes\n\nTry experimenting with different themes that comes with ggplot. `theme_minimal()` will produce a minimalist theme with less background:\n\n```{r ggplot-change theme}\nggplot(data = gapminder,\n       aes(x = gdpPercap, y = lifeExp, colour = continent)) + \n  geom_point() +\n  scale_x_log10() +\n  labs(x = \"GDP per capita (log scale)\",\n       y = \"Life expectancy\",\n       title = \"GDP vs Life Expectancy (1952-2007)\",\n       subtitle = \"People in developed countries tend to live longer\",\n       caption = \"Data source: Gapminder\") +\n  theme_minimal()\n```\n\nThere are other themes that can transform your plots to look more elegant.  \n\nYou can also choose the how fonts appear using `themes()` function:\n\n```{r ggplot-theme change font}\nggplot(data = gapminder,\n       aes(x = gdpPercap, y = lifeExp, colour = continent)) + \n  geom_point() +\n  scale_x_log10() +\n  labs(x = \"GDP per capita (log scale)\",\n       y = \"Life expectancy\",\n       title = \"GDP vs Life Expectancy (1952-2007)\",\n       subtitle = \"People in developed countries tend to live longer\",\n       caption = \"Data source: Gapminder\") +\n  theme(text = element_text(size = 15))\n```\n\nWith `themes()` function, you can remove borders, change the colour of fonts, remove the legend, etc. \n\n\n## 3.3 Visualising Numerical data\n\n### 3.3.1 Single variable\n\nFor visualising one variable, we mostly histogram, density plot, etc:\n\nCreate a histogram of GDP per capita:\n\n```{r ggplot-histogram}\nggplot(data = gapminder, aes(gdpPercap)) +\n  geom_histogram()\n```\n\nWe can see that the GDP per capita variable is skewed. Density plots are also similar to histograms:\n\n```{r ggplot-density}\nggplot(data = gapminder, aes(gdpPercap)) +\n  geom_density()\n```\n\n### 3.3.2 Visualising more than one numerical variables\n\nA scatter plot is used to show relationship between two variables\n\n```{r ggplot-scatter}\nggplot(data = gapminder, aes(x = gdpPercap, y = lifeExp)) + \n    geom_point()\n```\n\nWe can add other aeasthetics such as shape, colour etc: Let's add the colour aesthetics:\n\n```{r ggplot-scatter-colour}\nggplot(data = gapminder, aes(x = gdpPercap, y = lifeExp, colour = continent)) + \n    geom_point()\n```\n\nWe can change the add the size aesthetics and use population of the country:\n\n```{r ggplot-scatter-size}\nggplot(data = gapminder, aes(x = gdpPercap, y = lifeExp, colour = continent, size = pop)) + \n  geom_point()\n```\n\n### 3.3.3 Visualising numerical by group/category\n\nA boxplot is useful when we want to view statistics by a particular group, let say, GDP by continent:\n\n```{r ggplot-boxplot}\nggplot(data = gapminder, aes(x = continent, y = gdpPercap)) +\n  geom_boxplot()\n```\n\nWe can also use a column chart, let say, view GDP per capita by continent:\n\n```{r geom-col}\nggplot(data = gapminder, aes(x = continent, y = gdpPercap)) +\n  geom_col()\n```\n\n### 3.3.4 visualise trends\n\nWe mainly use line graphs to visualise statistics over time. Let use see how life expectancy changes over time \n\n```{r geom-line}\nggplot(data = gapminder, aes(x = year, y = lifeExp, group = country)) +\n  geom_line()\n```\n\n\nThis looks ugly, but we will learn how to create proper line plots at the end. \n\nYou can also use stacked column chart:\n\n```{r stacked column}\nggplot(data = gapminder, aes(x = year, y = pop, fill = continent)) +\n  geom_col()\n```\n\nView by continent and make it 100% stacked bar\n\n```{r stacked hundred percent}\nggplot(data = gapminder, aes(x = year, y = pop, fill = continent)) +\n  geom_col(position = \"fill\")\n```\n\nYou can make horizontal bars by using `coord_flip()`:\n\n```{r coord_flip}\nggplot(data = gapminder, aes(x = year, y = pop, fill = continent)) +\n  geom_col(position = \"fill\") +\n  coord_flip()\n```\n\n\n## 3.4 Visualising categorical/character data\n\nIn the gapminder dataset, we have two categorical columns: country and continent. One of the plot used for handling categorical data is bar chart. In ggplot, we use `geom_bar`:\n\n```{r bar-chart}\nggplot(data = gapminder, aes(x = continent)) + \n  geom_bar()\n```\n\n\n### Bonus one: Interactive charts\n\nYou can make your charts interactive by using `plotly` package, you will need to install it first\n\n```{r install plotly, eval=F, echo=T}\ninstall.packages(plotly)\n```\n\nThen load the package:\n\n```{r load plotly, warning=FALSE}\nlibrary(plotly)\n```\n\nFirst, create a plot using `ggplot()` and save it using the `<-` operator:\n\n```{r}\nfirst_plot <- ggplot(data = gapminder,\n       aes(x = gdpPercap, y = lifeExp, colour = continent)) + \n  geom_point() +\n  scale_x_log10() +\n  labs(x = \"GDP per capita (log scale)\",\n       y = \"Life expectancy\",\n       title = \"GDP vs Life Expectancy (1952-2007)\",\n       subtitle = \"People in developed countries tend to live longer\",\n       caption = \"Data source: Gapminder\") +\n  theme_minimal() \n```\n\nWe named the plot first_plot. From the `plotly` package, you going to use `ggplotly()` function and put the plot object you have created:\n\n```{r}\nggplotly(first_plot)\n```\n\nExperiment with the results, when you hoover around the plot, you can see it shows information by variable. You can select which continent to make visible by clicking on the legend. Beautiful!\n\n### Bonus Two: Animate\n\nYou can create an animated chart using the `gganimate` package. Install first:\n\n```{r install gganimate, eval=F, echo=T}\ninstall.packages(gganimate)\n```\n\nLoad the package:\n\n```{r load gganimate, warning=FALSE}\nlibrary(gganimate)\n```\n\nYou would want to see how the life expectancy and gdp per capita changes over time. First create the plot, but add few functions:\n\n\n```{r}\nanimated_plot <- ggplot(data = gapminder,\n       aes(x = gdpPercap, \n           y = lifeExp, \n           size = pop,\n           colour = continent)) + \n  geom_point() +\n  scale_x_log10() +\n  labs(x = \"GDP per capita (log scale)\",\n       y = \"Life expectancy\",\n       title = \"GDP vs Life Expectancy (1952-2007)\",\n       subtitle = 'Year: {frame_time}',\n       caption = \"Data source: Gapminder\") +\n  theme_minimal() +\n  transition_time(year) +\n  ease_aes('linear') \n\n\nanimate(animated_plot)\n```\n\nLook at the results!\n\n\nThis section introduced you to basics of data visualisation using ggplot2 package. You may need to consult the following materials for intermediate and advanced skills in data visualisation:\n\n- [Healy, K. (2018). Data visualization: a practical introduction. Princeton University Press](https://socviz.co/)\n\n- [The R Graph Gallery](https://r-graph-gallery.com/)\n\n- [R for Data Science](https://r4ds.hadley.nz/). Chapter 10-12\n\n- [Data visualisation with ggplot2: cheatsheet](https://github.com/rstudio/cheatsheets/blob/main/data-visualization-2.1.pdf)\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":true,"code-line-numbers":true,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","filters":["../include-files.lua","quarto"],"css":["../styles.css"],"toc":true,"output-file":"week-2.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.433","theme":{"light":"cosmo","dark":["cosmo","../theme-dark.scss"]},"code-background":true,"code-copy":true,"title":"3 Data Visualisation","tidy":true,"code-annotations":true},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}