{"title":"4 Data Wrangling and Manipulation","markdown":{"yaml":{"title":"4 Data Wrangling and Manipulation","code-copy":true,"code-line-numbers":true,"tidy":true,"code-annotations":"below"},"headingText":"4.1 PART I","containsRefs":false,"markdown":"\n\n\n\n## Learning objectives\n\n-   Understand DataFrames\n\n-   Manipulate, transform and analyse DataFrames\n\n## 4.1.1 Introduction\n\nDataframes, as we saw [the previous section](week-2.qmd), is a tabular data format, with columns and rows. Columns are *variable* names and rows are individual *observations*. Just like other data structures dicussed in previous chapters, a DataFrame handles different data types:\n- int64: whole numbers (e.g age = 30)\n\n- float64; numbers with decimals (e.g. height = 1.9, temperature = 33.0)\n\n- datetime64: date and time\n\n- category: catogories or factors (e.g. gender = male, female; race = black, white, ...)\n\n- bool: True or False\n\n- object: string \n\n\nAccording to Hadley Wickman, a DataFrame should be in a *tidy* format:\n\n> 1.  Each variable is a column; each column is a variable.\n> 2.  Each observation is row; each row is an observation.\n> 3.  Each value is a cell; each cell is a single value. \n\n\nThe pandas package provide a toolbox of working analysing, querying and transforming DataFrames. We will continue working with the `gapminder dataset. First load pandas and read the data, saving it as \"gapminder\":\n\n```{python}\nimport pandas as pd\n\ngapminder = pd.read_csv(\"https://raw.githubusercontent.com/aubreympungose/data-science-course/main/weeks/data/gapminder.csv\")\n```\n\n\nLet's examine the data by looking at few observations:\n\n```{python}\ngapminder.head()\n```\n\nYou can check how many variables are in the data and what type of data:\n\n```{python}\ngapminder.info()\n```\n\nYou can see that `gapminder` has 6 columns and 1704 rows. The columns in the dataset are:\n\n- country: Simply the country\n\n- continent: Continent\n\n- year: The year data was collected\n\n- lifeExp: Life expectancy of a country in year\n\n- pop: Population of the country in a year\n\n- gdpPercap: Gross Domestic Product of a country in a year\n\n\nYou can also print the columns in the dataset by using `.columns` attribute. \n\n```{python}\ngapminder.columns\n```\nYou can get the number of rows by using `.index` attribute:\n\n```{python}\ngapminder.index\n```\n\n\n## MANIPULATING COLUMNS\n\n#### Access/Select columns\n\nWe may be interested in some of the columns in the `gampminder` dataframe, let say, for example, \"country\" only. You can select a specific column by taking  the name of the DataFrame, followed by square brackets (`[]`) and passing the name of the \"column\" inside square brackets:\n\n```{python}\ngapminder[\"country\"]\n```\n\nTo Access multiple, columns you follow the same method as above, except that you wrap column names list (`[]`), so you end up with double sqaure brackets. Let's say we want to select \"country\", \"pop\", and \"year\" columns:\n\n```{python}\ngapminder[[\"country\", \"pop\", \"year\"]]\n```\n\n\nYou can alse access columns by their index using `.iloc()` function. Remember that an index in Python starts at 0, for example, to access the first column\n\n```{python}\ngapminder.iloc[:, 0]\n```\n\nIn the above code, the colon (`:`) specify that we want to retun all rows; you will more abouth this when selecting by both columns and rows.\n\nTo access multiple columns, you pass a list of indexes of columns. For example, select the 1st, 3rd and 5th columns:\n\n```{python}\ngapminder.iloc[:, [0, 2, 4]]\n```\n\nSuppose you want access a range of of columns, for example, from the 1st to the 3rd column:\n\n```{python}\ngapminder.iloc[:, 0:3]\n```\n\n### Rename columns\n\nYou may need to change column names. For example, in the `gapminder` dataset, we may change the \"pop\" column to population. You will use the `.rename()` function, pass the column argument, and specify column names within the dictionary (`{\"old_name\":\"new_name\"}`). We will assign the results to the new DataFrame named `gapminder_new`:\n\n```{python}\ngapminder_new = gapminder.rename(columns = {\"pop\":\"population\"})\n\ngapminder_new.head()\n```\n\nThe \"pop\" column has been changed to \"population\".\n\nYou can also rename multiple columns; in this case, rename \"lifeExp\" and \"gdpPercap\":\n\n```{python}\ngapminder_new = gapminder.rename(columns = {\"lifeExp\":\"life_expectancy\", \"gdpPercap\":\"gdp_pc\"})\n\ngapminder_new.head()\n```\n\n### Making new columns, Removing columns\n\nTo create a new column you simply take the name of the dataframe, pass the string of the new columnn inside sqaure bracket, and assign values:\n\n```{python}\ngapminder[\"new_column\"] = 20\n\ngapminder.head()\n```\nThere is a new column added that has values of 20. \n\nIn many cases, we may need to create a new column resulting from manipulating other columns. For example, we know that the GDP per capita is calculated from dividing the total GDP by a population. If we want to create a new column of the total GDP, we need to multiply GDP per capita by the population size of the country:\n\n```{python}\ngapminder[\"total_gdp\"] = gapminder[\"gdpPercap\"] * gapminder[\"pop\"]\n\ngapminder.head()\n```\n\nWe have a new column (\"total_gdp\") added to the `gapminder` DataFrame. \n\nYou can remove columns by using `.drop() function:\n\n```{python}\ngapminder = gapminder.drop([\"total_gdp\", \"new_column\"], axis = 1)\n\ngapminder.head()\n```\n\n\n\n## Manipulate Rows\nYou can rows by any column by using `.sort_values()` function:\n\n```{python}\ngapminder.sort_values([\"lifeExp\"])\n```\n\nYou can see that Rwanda had the lowest life expectancy. \n\nTo sort values into descending order (highest to lowest), you pass `ascending = False`:\n\n```{python}\ngapminder.sort_values([\"pop\"], ascending = False)\n```\n\nYou can see that China had the highest population.\n\n\nYou may be interested in observations/rows that meet certain conditions. For example, in the gapminder data, you may need to keel all observations from the African continent, and save as a new DataFrame called `gapminder_africa`:\n\n```{python}\n\ngapminder_africa = gapminder[gapminder[\"continent\"] ==  \"Africa\"]\n\ngapminder_africa.head()\n```\n\nFilter all the observations that are in the year 2007 and ave it as `gapminder_2007:\n\n```{python}\n\ngapminder_2007 = gapminder[gapminder[\"year\"] == 2007]\n\ngapminder_2007.head()\n```\n\n::: {.callout-note}\nNote that we are using the equal operator `==` operator not the assignment `=` operator to filter rows. Most beginners will confuse the two.\n:::\n\nwhen filtering rows, you are using boolean operators:\n\n- `==`: equal to\n\n- `!=`: not equal to\n\n- `>`: greater than\n\n- `<`: less than\n\n- `>=`: greater than or equal to\n\n- `<=`: less than or equal to\n\nYou can also filter rows by combining 2 conditions. Let us say we want:\n\n- countries in Africa\n\n- the year 2007\n\nand save as `africa_2007`:\n\n```{python}\nafrica_2007 = gapminder[(gapminder[\"continent\"] == \"Africa\")  & (gapminder[\"year\"] == 2007)]\nafrica_2007.head()\n```\n\nSometimes you may need to filter multiple rows, let say, more than 5 countries. It would be inconvinient to type `country == \"...\"` five times. This is where the `.isin()` function is useful; you pass the list of observations you want. We will work with with observations from the year 2007.\n\n```{python}\ngapminder_2007 = gapminder[gapminder[\"year\"] == 2007]\n\ncountries = gapminder_2007[gapminder_2007[\"country\"].isin([\"China\", \"Brazil\", \"India\", \"South Africa\"])]\n\ncountries.head()\n```\n\nYou can also filter rows by using their index positions, let say, the 1st and 3rd rows:\n\n```{python}\ngapminder.iloc[[0, 4]]\n```\n\nYou can also filter a range of rows For example, we may select top 10 countries with the highes population in 2007. So we will use the `gapminder_2007` DataFrame. You will need to arrange by population first\n\n```{python}\ngapminder_2007 = gapminder_2007.sort_values([\"pop\"], ascending = False)\ngapminder_2007.head()\n```\nYou can see that observations are sorted in descending order from highest popultion to the lowest; now filter:\n\n```{python}\ngapminder_2007.iloc[0:10]\n```\n\n\nAnother way of filtering rows is to use the `.query()` method. This is how you would filter observations from the African continent:\n\n```{python}\ngapminder_africa = gapminder_2007.query(\"continent == 'Africa'\")\ngapminder_africa.head()\n```\n\nFilter observations where life expectancy is equal to or greater 80 and the year is 2007; assign the results to `high_life_expect`:\n\n```{python}\nhigh_life_expect = gapminder.query(\"lifeExp >= 80 and year == 2007\")\n\nhigh_life_expect.head()\n```\n\n\n## Summary statistics and aggregating\n\nOne of the important task in data science is to explore the data using summary statistics. There are various methods used to summarise data, including:\n\n| Summary stat                                  | pandas function |\n|-----------------------------------------------|-----------------|\n| Mean/average                                  | `.mean()`       |\n| Median/mid-point                              | `.median()`     |\n| Sum of values                                 | `.sum()`        |\n| Minimum                                       | `.min()`        |\n| Maximum                                       | `.max()`        |\n| Standard deviation: spread/dispersion of data | `.std()`        |\n| Count or total number of observations         | `.count()`      |\n\n\nLet explore these functions. What is the average/mean life expectancy of all countries?\n\n```{python}\ngapminder[\"lifeExp\"].mean()\n```\n\nWhat is the median GDP per capita?\n\n```{python}\ngapminder[\"gdpPercap\"].median()\n```\n\nFind the minimum population:\n\n```{python}\ngapminder[\"pop\"].min()\n```\n\nYou can experiment with other functions listed in the above table.\n\n\n### Grouping\n\nIn many cases, you may need to get summary statistics by a category or group. In above examples, although it is important to get the mean population of the world, but this tells us little about variaion in different regions. pandas has `.groupby()` function that group observations into categories. For example, you may be interested on finding the **average the GDP per capita** in each **continent**. Here you would use the `.groupby()` function, passing the \"continent\" column inside and follow by the summary statistics function:\n\n```{python}\ngapminder.groupby(\"continent\")[\"gdpPercap\"].mean()\n```\n\nThe result show mean wealth (GDP per capita) by a continent. Wouldn't be nice to sort these statistics from highest to lowest?\n\n```{python}\ngapminder.groupby(\"continent\")[\"gdpPercap\"].mean().sort_values(ascending = False)\n```\n\nNow We can see that Oceania has the highest average wealth and Africa has the lowest. \n\nSometimes you may need to find multiple summary statistics: mean, median, standard deviation, minimum,and maximum at the same time. `.agg()` function is able to do this:\n\n```{python}\ngapminder.groupby(\"continent\")[\"gdpPercap\"].agg([\"mean\", \"median\", \"std\", \"min\", \"max\"])\n```\nWhat if you want to find a summary stat of multiple columns? For example, find the mean pf these columns per continent: life expectancy, population, GDP per capita:\n\n\n```{python}\ngapminder.groupby(\"continent\").agg(\n    mean_life_expect = (\"lifeExp\", \"mean\"),\n    mean_pop=(\"pop\", \"mean\"),\n    mean_gdp_pc = (\"gdpPercap\", \"mean\")\n)\n```\n\nIn this chapter you have learned about different ways of manipulating DataFrames. Next, we go to advanced methods.","srcMarkdownNoYaml":"\n\n\n# 4.1 PART I\n\n## Learning objectives\n\n-   Understand DataFrames\n\n-   Manipulate, transform and analyse DataFrames\n\n## 4.1.1 Introduction\n\nDataframes, as we saw [the previous section](week-2.qmd), is a tabular data format, with columns and rows. Columns are *variable* names and rows are individual *observations*. Just like other data structures dicussed in previous chapters, a DataFrame handles different data types:\n- int64: whole numbers (e.g age = 30)\n\n- float64; numbers with decimals (e.g. height = 1.9, temperature = 33.0)\n\n- datetime64: date and time\n\n- category: catogories or factors (e.g. gender = male, female; race = black, white, ...)\n\n- bool: True or False\n\n- object: string \n\n\nAccording to Hadley Wickman, a DataFrame should be in a *tidy* format:\n\n> 1.  Each variable is a column; each column is a variable.\n> 2.  Each observation is row; each row is an observation.\n> 3.  Each value is a cell; each cell is a single value. \n\n\nThe pandas package provide a toolbox of working analysing, querying and transforming DataFrames. We will continue working with the `gapminder dataset. First load pandas and read the data, saving it as \"gapminder\":\n\n```{python}\nimport pandas as pd\n\ngapminder = pd.read_csv(\"https://raw.githubusercontent.com/aubreympungose/data-science-course/main/weeks/data/gapminder.csv\")\n```\n\n\nLet's examine the data by looking at few observations:\n\n```{python}\ngapminder.head()\n```\n\nYou can check how many variables are in the data and what type of data:\n\n```{python}\ngapminder.info()\n```\n\nYou can see that `gapminder` has 6 columns and 1704 rows. The columns in the dataset are:\n\n- country: Simply the country\n\n- continent: Continent\n\n- year: The year data was collected\n\n- lifeExp: Life expectancy of a country in year\n\n- pop: Population of the country in a year\n\n- gdpPercap: Gross Domestic Product of a country in a year\n\n\nYou can also print the columns in the dataset by using `.columns` attribute. \n\n```{python}\ngapminder.columns\n```\nYou can get the number of rows by using `.index` attribute:\n\n```{python}\ngapminder.index\n```\n\n\n## MANIPULATING COLUMNS\n\n#### Access/Select columns\n\nWe may be interested in some of the columns in the `gampminder` dataframe, let say, for example, \"country\" only. You can select a specific column by taking  the name of the DataFrame, followed by square brackets (`[]`) and passing the name of the \"column\" inside square brackets:\n\n```{python}\ngapminder[\"country\"]\n```\n\nTo Access multiple, columns you follow the same method as above, except that you wrap column names list (`[]`), so you end up with double sqaure brackets. Let's say we want to select \"country\", \"pop\", and \"year\" columns:\n\n```{python}\ngapminder[[\"country\", \"pop\", \"year\"]]\n```\n\n\nYou can alse access columns by their index using `.iloc()` function. Remember that an index in Python starts at 0, for example, to access the first column\n\n```{python}\ngapminder.iloc[:, 0]\n```\n\nIn the above code, the colon (`:`) specify that we want to retun all rows; you will more abouth this when selecting by both columns and rows.\n\nTo access multiple columns, you pass a list of indexes of columns. For example, select the 1st, 3rd and 5th columns:\n\n```{python}\ngapminder.iloc[:, [0, 2, 4]]\n```\n\nSuppose you want access a range of of columns, for example, from the 1st to the 3rd column:\n\n```{python}\ngapminder.iloc[:, 0:3]\n```\n\n### Rename columns\n\nYou may need to change column names. For example, in the `gapminder` dataset, we may change the \"pop\" column to population. You will use the `.rename()` function, pass the column argument, and specify column names within the dictionary (`{\"old_name\":\"new_name\"}`). We will assign the results to the new DataFrame named `gapminder_new`:\n\n```{python}\ngapminder_new = gapminder.rename(columns = {\"pop\":\"population\"})\n\ngapminder_new.head()\n```\n\nThe \"pop\" column has been changed to \"population\".\n\nYou can also rename multiple columns; in this case, rename \"lifeExp\" and \"gdpPercap\":\n\n```{python}\ngapminder_new = gapminder.rename(columns = {\"lifeExp\":\"life_expectancy\", \"gdpPercap\":\"gdp_pc\"})\n\ngapminder_new.head()\n```\n\n### Making new columns, Removing columns\n\nTo create a new column you simply take the name of the dataframe, pass the string of the new columnn inside sqaure bracket, and assign values:\n\n```{python}\ngapminder[\"new_column\"] = 20\n\ngapminder.head()\n```\nThere is a new column added that has values of 20. \n\nIn many cases, we may need to create a new column resulting from manipulating other columns. For example, we know that the GDP per capita is calculated from dividing the total GDP by a population. If we want to create a new column of the total GDP, we need to multiply GDP per capita by the population size of the country:\n\n```{python}\ngapminder[\"total_gdp\"] = gapminder[\"gdpPercap\"] * gapminder[\"pop\"]\n\ngapminder.head()\n```\n\nWe have a new column (\"total_gdp\") added to the `gapminder` DataFrame. \n\nYou can remove columns by using `.drop() function:\n\n```{python}\ngapminder = gapminder.drop([\"total_gdp\", \"new_column\"], axis = 1)\n\ngapminder.head()\n```\n\n\n\n## Manipulate Rows\nYou can rows by any column by using `.sort_values()` function:\n\n```{python}\ngapminder.sort_values([\"lifeExp\"])\n```\n\nYou can see that Rwanda had the lowest life expectancy. \n\nTo sort values into descending order (highest to lowest), you pass `ascending = False`:\n\n```{python}\ngapminder.sort_values([\"pop\"], ascending = False)\n```\n\nYou can see that China had the highest population.\n\n\nYou may be interested in observations/rows that meet certain conditions. For example, in the gapminder data, you may need to keel all observations from the African continent, and save as a new DataFrame called `gapminder_africa`:\n\n```{python}\n\ngapminder_africa = gapminder[gapminder[\"continent\"] ==  \"Africa\"]\n\ngapminder_africa.head()\n```\n\nFilter all the observations that are in the year 2007 and ave it as `gapminder_2007:\n\n```{python}\n\ngapminder_2007 = gapminder[gapminder[\"year\"] == 2007]\n\ngapminder_2007.head()\n```\n\n::: {.callout-note}\nNote that we are using the equal operator `==` operator not the assignment `=` operator to filter rows. Most beginners will confuse the two.\n:::\n\nwhen filtering rows, you are using boolean operators:\n\n- `==`: equal to\n\n- `!=`: not equal to\n\n- `>`: greater than\n\n- `<`: less than\n\n- `>=`: greater than or equal to\n\n- `<=`: less than or equal to\n\nYou can also filter rows by combining 2 conditions. Let us say we want:\n\n- countries in Africa\n\n- the year 2007\n\nand save as `africa_2007`:\n\n```{python}\nafrica_2007 = gapminder[(gapminder[\"continent\"] == \"Africa\")  & (gapminder[\"year\"] == 2007)]\nafrica_2007.head()\n```\n\nSometimes you may need to filter multiple rows, let say, more than 5 countries. It would be inconvinient to type `country == \"...\"` five times. This is where the `.isin()` function is useful; you pass the list of observations you want. We will work with with observations from the year 2007.\n\n```{python}\ngapminder_2007 = gapminder[gapminder[\"year\"] == 2007]\n\ncountries = gapminder_2007[gapminder_2007[\"country\"].isin([\"China\", \"Brazil\", \"India\", \"South Africa\"])]\n\ncountries.head()\n```\n\nYou can also filter rows by using their index positions, let say, the 1st and 3rd rows:\n\n```{python}\ngapminder.iloc[[0, 4]]\n```\n\nYou can also filter a range of rows For example, we may select top 10 countries with the highes population in 2007. So we will use the `gapminder_2007` DataFrame. You will need to arrange by population first\n\n```{python}\ngapminder_2007 = gapminder_2007.sort_values([\"pop\"], ascending = False)\ngapminder_2007.head()\n```\nYou can see that observations are sorted in descending order from highest popultion to the lowest; now filter:\n\n```{python}\ngapminder_2007.iloc[0:10]\n```\n\n\nAnother way of filtering rows is to use the `.query()` method. This is how you would filter observations from the African continent:\n\n```{python}\ngapminder_africa = gapminder_2007.query(\"continent == 'Africa'\")\ngapminder_africa.head()\n```\n\nFilter observations where life expectancy is equal to or greater 80 and the year is 2007; assign the results to `high_life_expect`:\n\n```{python}\nhigh_life_expect = gapminder.query(\"lifeExp >= 80 and year == 2007\")\n\nhigh_life_expect.head()\n```\n\n\n## Summary statistics and aggregating\n\nOne of the important task in data science is to explore the data using summary statistics. There are various methods used to summarise data, including:\n\n| Summary stat                                  | pandas function |\n|-----------------------------------------------|-----------------|\n| Mean/average                                  | `.mean()`       |\n| Median/mid-point                              | `.median()`     |\n| Sum of values                                 | `.sum()`        |\n| Minimum                                       | `.min()`        |\n| Maximum                                       | `.max()`        |\n| Standard deviation: spread/dispersion of data | `.std()`        |\n| Count or total number of observations         | `.count()`      |\n\n\nLet explore these functions. What is the average/mean life expectancy of all countries?\n\n```{python}\ngapminder[\"lifeExp\"].mean()\n```\n\nWhat is the median GDP per capita?\n\n```{python}\ngapminder[\"gdpPercap\"].median()\n```\n\nFind the minimum population:\n\n```{python}\ngapminder[\"pop\"].min()\n```\n\nYou can experiment with other functions listed in the above table.\n\n\n### Grouping\n\nIn many cases, you may need to get summary statistics by a category or group. In above examples, although it is important to get the mean population of the world, but this tells us little about variaion in different regions. pandas has `.groupby()` function that group observations into categories. For example, you may be interested on finding the **average the GDP per capita** in each **continent**. Here you would use the `.groupby()` function, passing the \"continent\" column inside and follow by the summary statistics function:\n\n```{python}\ngapminder.groupby(\"continent\")[\"gdpPercap\"].mean()\n```\n\nThe result show mean wealth (GDP per capita) by a continent. Wouldn't be nice to sort these statistics from highest to lowest?\n\n```{python}\ngapminder.groupby(\"continent\")[\"gdpPercap\"].mean().sort_values(ascending = False)\n```\n\nNow We can see that Oceania has the highest average wealth and Africa has the lowest. \n\nSometimes you may need to find multiple summary statistics: mean, median, standard deviation, minimum,and maximum at the same time. `.agg()` function is able to do this:\n\n```{python}\ngapminder.groupby(\"continent\")[\"gdpPercap\"].agg([\"mean\", \"median\", \"std\", \"min\", \"max\"])\n```\nWhat if you want to find a summary stat of multiple columns? For example, find the mean pf these columns per continent: life expectancy, population, GDP per capita:\n\n\n```{python}\ngapminder.groupby(\"continent\").agg(\n    mean_life_expect = (\"lifeExp\", \"mean\"),\n    mean_pop=(\"pop\", \"mean\"),\n    mean_gdp_pc = (\"gdpPercap\", \"mean\")\n)\n```\n\nIn this chapter you have learned about different ways of manipulating DataFrames. Next, we go to advanced methods."},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":true,"code-line-numbers":true,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","filters":["../include-files.lua","quarto"],"css":["../styles.css"],"toc":true,"output-file":"week-3.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.433","theme":{"light":"cosmo","dark":["cosmo","../theme-dark.scss"]},"code-background":true,"code-copy":true,"title":"4 Data Wrangling and Manipulation","tidy":true,"code-annotations":"below"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}