{
  "hash": "802b831a972138468e0568932b08e072",
  "result": {
    "markdown": "---\ntitle: \"2 Data Structures in Python\"\ncode-copy: true\ncode-line-numbers: true\ntidy: true\n---\n\nIn this chapter we deal with different data structures that can hold data in Python. Specifically, we will focus on the follwoing data structures:\n\n- Lists\n\n- Tuples\n\n- Dictionaries\n\n- DataFrames\n\n\n### Lists\n\nList is a data structure that store a collection of elements/items within it. For example, in [previous chapter](week-1a.qmd) we created a string variable named `country` that contained \"South Africa\"  element:\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\ncountry = \"South Africa\"\n\nprint(country)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSouth Africa\n```\n:::\n:::\n\n\nWhat if we wanted to create another country variable, named country_2 with \"Zimbabwe\" as an element? We can also do this:\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\ncountry_2 = \"Zimbabwe\"\nprint(country_2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nZimbabwe\n```\n:::\n:::\n\n\nWhat if we want to add country_3, country_4, etc? We can end up having many variables. This where lists come in. Lists are used to hold many items together. you can create lists in Python by using square barackets (`[]`):\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nsouthern_african_countries = [\"Angola\", \"Botswana\", \"Lesotho\", \"Malawi\", \"Mozambique\", \"Namibia\", \"South Africa\", \"Swaziland\", \"Zambia\", \"Zimbabwe\"]\n\nprint(southern_african_countries)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['Angola', 'Botswana', 'Lesotho', 'Malawi', 'Mozambique', 'Namibia', 'South Africa', 'Swaziland', 'Zambia', 'Zimbabwe']\n```\n:::\n:::\n\n\nWe now have a list of all countries in the Southern African region. There are various functions that can be used to extract, analyse and manipulate elements in a list. For example, you may be interested on how many elements are in a lists; in our case, how many countries are in the `southern_african_countries` list. You can use the `len()` function:\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nsouthern_african_countries = [\"Angola\", \"Botswana\", \"Lesotho\", \"Malawi\", \"Mozambique\", \"Namibia\", \"South Africa\", \"Swaziland\", \"Zambia\", \"Zimbabwe\"]\n\nprint(len(southern_african_countries))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n10\n```\n:::\n:::\n\n\nThe list has 10 elements/items. \n\n\n#### Subset a list\n\nYou can extract the list item by using the `[]` and the index position of the item. Note that Python index start at 0, meaning the first element will be in the position 0. This is important especially when coming from R background. Let extract the first element:\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nprint(southern_african_countries[0])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAngola\n```\n:::\n:::\n\n\nThe first element is Angola. \n\nYou can use can access the last element by:\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nprint(southern_african_countries[-1])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nZimbabwe\n```\n:::\n:::\n\n\nYou can access more than 1 items; for example, extract the first, second and third items in the list by slicing:\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nprint(southern_african_countries[0:3])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['Angola', 'Botswana', 'Lesotho']\n```\n:::\n:::\n\n\nNotice that we have included the index `3`, which is the 4th item, although the element itself is not printed. When slicing a list, the last index mentioned is not included. This is very importnt to note. There are other slicing options:\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\nprint(southern_african_countries[:3])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['Angola', 'Botswana', 'Lesotho']\n```\n:::\n:::\n\n\n#### Manipulate a list\n\nList elements can be changed. For example, in 2018 Zwaziland changed their name to \"eSwatini\". We can change this in a list. First re-create the list:\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\nsouthern_african_countries = [\"Angola\", \"Botswana\", \"Lesotho\", \"Malawi\", \"Mozambique\", \"Namibia\", \"South Africa\", \"Swaziland\", \"Zambia\", \"Zimbabwe\"]\n\nprint(southern_african_countries)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['Angola', 'Botswana', 'Lesotho', 'Malawi', 'Mozambique', 'Namibia', 'South Africa', 'Swaziland', 'Zambia', 'Zimbabwe']\n```\n:::\n:::\n\n\nThen change the list element:\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\nsouthern_african_countries[7] = \"eSwatini\"\nprint(southern_african_countries)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['Angola', 'Botswana', 'Lesotho', 'Malawi', 'Mozambique', 'Namibia', 'South Africa', 'eSwatini', 'Zambia', 'Zimbabwe']\n```\n:::\n:::\n\n\nWe have changed the list element from \"Swaziland\" to \"Eswatini\".\n\nYou can also **add** new elements in a list. Suppose a geographer told us that our list of Southern African countries missed 3 countries:  Democratic Republic of the Congo, Mauritius, Madagascar and Seychelles. In Python, we can update our list and assign it to anew variable called `southern_africa_updated`. First find the length of the original `southern_african_countries`:\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\nlen(southern_african_countries)\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\n10\n```\n:::\n:::\n\n\nAdd new items:\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\nsouthern_africa_updated = southern_african_countries + [\"Democratic Republic of the Congo\", \"Mauritius\", \"Madagascar\", \"Seychelles\"]\n\nprint(southern_africa_updated)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['Angola', 'Botswana', 'Lesotho', 'Malawi', 'Mozambique', 'Namibia', 'South Africa', 'eSwatini', 'Zambia', 'Zimbabwe', 'Democratic Republic of the Congo', 'Mauritius', 'Madagascar', 'Seychelles']\n```\n:::\n:::\n\n\nFind the lenght of the updated variable:\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\nlen(southern_africa_updated)\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\n14\n```\n:::\n:::\n\n\nThe updated variable has lenght of 14. This means we have added 4 items.\n\nYou can remove an element from the list by using `del()` function:\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\ndel southern_africa_updated[0]\n\nprint(southern_africa_updated)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['Botswana', 'Lesotho', 'Malawi', 'Mozambique', 'Namibia', 'South Africa', 'eSwatini', 'Zambia', 'Zimbabwe', 'Democratic Republic of the Congo', 'Mauritius', 'Madagascar', 'Seychelles']\n```\n:::\n:::\n\n\nWe have removed the element at the index 0, which is Botswana.\n\n\n#### Manipulating list with numeric data\n\nIn above examples we have worked with list that contain string data types: all out elements were string (country names). Suppose we have the life expectancy of those countries. Life expectancy is the average number of years is expected to live:\n\nLet us create a numeric list, that we name `life_expectancy`, that has the average life expectancy of the countries of Southern Africa:\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\nlife_expectancy = [61.6, 61.1, 57.1, 53.1, 62.9, 59.3, 59.3, 62.3, 61.2, 59.3]\n\nprint(life_expectancy)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[61.6, 61.1, 57.1, 53.1, 62.9, 59.3, 59.3, 62.3, 61.2, 59.3]\n```\n:::\n:::\n\n\nWe can find the **minimum** life expactancy:\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\nprint(min(life_expectancy))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n53.1\n```\n:::\n:::\n\n\nPrint the **maximum** life expectancy:\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\nprint(max(life_expectancy))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n62.9\n```\n:::\n:::\n\n\nNot that a list can hold elements of of different data types: string, float, integer, boolean, etc.\n\n person_1 = [\"Name\", \"Aubrey\", \"Age\", 32, \"Height\", 1.8, \"Is male?\", True]\n print(person_1)\n ```\n\n\n#### NumPy Arrays\n\nA NumPy array is a data structure that can hold numeic elements. It is short for Numeric Python. It is an important data structure if you want to manipulate numeric data. First, you will need to install the `numpy` package if not already installed:\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\npip install numpy\n```\n:::\n\n\nThen load the library as:\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\nimport numpy as np\n```\n:::\n\n\nSuppose we have the lenght in kilometers of major South Africa rivers stored as a list and assigned it to `river_lenght_km` variable:\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\nriver_lenght_km = [2200, 1800, 1210, 502, 560, 645, 520, 480]\nprint(river_lenght_km)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[2200, 1800, 1210, 502, 560, 645, 520, 480]\n```\n:::\n:::\n\n\nWe need to convert this lift into an numpy array:\n\n::: {.cell execution_count=21}\n``` {.python .cell-code}\nriver_lenght_km = np.array(river_lenght_km)\n\nprint(type(river_lenght_km))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'numpy.ndarray'>\n```\n:::\n:::\n\n\n##### Summary statistics and mathematical operations\n\nThere many functions within the `numpy` library. We can calculate summary statistics:\n\nGet the mean/average:\n\n::: {.cell execution_count=22}\n``` {.python .cell-code}\nprint(np.mean(river_lenght_km))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n989.625\n```\n:::\n:::\n\n\nGet the median:\n\n::: {.cell execution_count=23}\n``` {.python .cell-code}\nprint(np.median(river_lenght_km))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n602.5\n```\n:::\n:::\n\n\nGet the standard deviation:\n\n::: {.cell execution_count=24}\n``` {.python .cell-code}\nprint(np.std(river_lenght_km))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n631.6316049526021\n```\n:::\n:::\n\n\nThere are other functions you can use. \n\nWhat are the rivers that have lenght of greater than 1000 kilometers? Find these and assign the result to a variable named longest_rivers\n\n::: {.cell execution_count=25}\n``` {.python .cell-code}\nlongest_rivers = river_lenght_km[river_lenght_km > 1000]\nprint(longest_rivers)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[2200 1800 1210]\n```\n:::\n:::\n\n\nThe `river_lenght_km` array is in kilometers. What if we want to convert to meters? Since 1 km = 1000 meters, you can convert kilometer to meter by multplying by 1000 since. Let's do this and assign result to a new variable named river_lenght_meters\n\n::: {.cell execution_count=26}\n``` {.python .cell-code}\nriver_lenght_meters = river_lenght_km * 1000\n\nprint(river_lenght_meters)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[2200000 1800000 1210000  502000  560000  645000  520000  480000]\n```\n:::\n:::\n\n\nJust like lists, you can subsets numpy arrays using index positions of the element. To acces the second element of `river_lenght_km`: \n\n::: {.cell execution_count=27}\n``` {.python .cell-code}\nprint(river_lenght_km[1])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1800\n```\n:::\n:::\n\n\nYou can sort elements into ascending or descending order:\n\n::: {.cell execution_count=28}\n``` {.python .cell-code}\nnp.sort(river_lenght_km)\n```\n\n::: {.cell-output .cell-output-display execution_count=27}\n```\narray([ 480,  502,  520,  560,  645, 1210, 1800, 2200])\n```\n:::\n:::\n\n\nSort into descending\n\n::: {.cell execution_count=29}\n``` {.python .cell-code}\nnp.sort(river_lenght_km)[::-1]\n```\n\n::: {.cell-output .cell-output-display execution_count=28}\n```\narray([2200, 1800, 1210,  645,  560,  520,  502,  480])\n```\n:::\n:::\n\n\nNote that NumPy arrays can also be 2 dimensional; 2D arrays is a matrix like data with rows and columns:\n\n::: {.cell execution_count=30}\n``` {.python .cell-code}\ntwo_d_array = np.array([[1, 2, 3],\n                   [4, 5, 6],\n                   [7, 8, 9]])\n\nprint(two_d_array)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1 2 3]\n [4 5 6]\n [7 8 9]]\n```\n:::\n:::\n\n\n### Dictionaries\n\nRemeember we created two lists previously, `southern_african_countries` and `life_expectancy`. \n\n::: {.cell execution_count=31}\n``` {.python .cell-code}\nsouthern_african_countries = [\"Angola\", \"Botswana\", \"Lesotho\", \"Malawi\", \"Mozambique\", \"Namibia\", \"South Africa\", \"Swaziland\", \"Zambia\", \"Zimbabwe\"]\n\nprint(southern_african_countries)\n\nlife_expectancy = [61.6, 61.1, 57.1, 53.1, 62.9, 59.3, 59.3, 62.3, 61.2, 59.3]\n\nprint(life_expectancy)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['Angola', 'Botswana', 'Lesotho', 'Malawi', 'Mozambique', 'Namibia', 'South Africa', 'Swaziland', 'Zambia', 'Zimbabwe']\n[61.6, 61.1, 57.1, 53.1, 62.9, 59.3, 59.3, 62.3, 61.2, 59.3]\n```\n:::\n:::\n\n\nWe can find the corresponding life expectancy of, for example, \"Botswana\". First find the index position of Botswana:\n\n::: {.cell execution_count=32}\n``` {.python .cell-code}\nbotswana_index = southern_african_countries.index(\"Botswana\")\n\nprint(botswana_index)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1\n```\n:::\n:::\n\n\nThe index of Botswana is 1. We can access the corresposing life expectancy:\n\n::: {.cell execution_count=33}\n``` {.python .cell-code}\nlife_expectancy[botswana_index]\n```\n\n::: {.cell-output .cell-output-display execution_count=32}\n```\n61.1\n```\n:::\n:::\n\n\nThe life expectancy of Botswana. But this is not efficient if we have large data. This where dictionaries come in:\n\n::: {.cell execution_count=34}\n``` {.python .cell-code}\nsouthern_africa = {\"Angola\":61.6, \n                   \"Botswana\":61.1,\n                   \"Lesotho\":57.1,\n                   \"Malawi\":53.1,\n                   \"Mozambique\":62.9,\n                   \"Namibia\":59.3}\n\nprint(southern_africa)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{'Angola': 61.6, 'Botswana': 61.1, 'Lesotho': 57.1, 'Malawi': 53.1, 'Mozambique': 62.9, 'Namibia': 59.3}\n```\n:::\n:::\n\n\nWe have created a dictionary named southern_africa. A dictionary has `keys` and `values` and this is always in pairs. For example, we have `Angola` as a key with its corresponding value `61.6`. \n\nYou can find values of each keys:\n\n::: {.cell execution_count=35}\n``` {.python .cell-code}\nprint(southern_africa[\"Malawi\"])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n53.1\n```\n:::\n:::\n\n\nOf Namibia:\n\n::: {.cell execution_count=36}\n``` {.python .cell-code}\nprint(southern_africa[\"Namibia\"])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n59.3\n```\n:::\n:::\n\n\nYou can find keys of all keys:\n\n::: {.cell execution_count=37}\n``` {.python .cell-code}\nprint(southern_africa.keys())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ndict_keys(['Angola', 'Botswana', 'Lesotho', 'Malawi', 'Mozambique', 'Namibia'])\n```\n:::\n:::\n\n\nIf you look at the `southern_africa` dictionary, we did not include all other countries in the region. We may need to add, let say, Zimbabwe:\n\n::: {.cell execution_count=38}\n``` {.python .cell-code}\nsouthern_africa[\"Zimbabwe\"] = 59.3\n\nprint(southern_africa)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{'Angola': 61.6, 'Botswana': 61.1, 'Lesotho': 57.1, 'Malawi': 53.1, 'Mozambique': 62.9, 'Namibia': 59.3, 'Zimbabwe': 59.3}\n```\n:::\n:::\n\n\nYou can see that the dictionary has been updated to include Zimbwabwe.\n\nSuppose  demographer pouint out that the values of Botswana is outdated; that the life expectancy of the country has increased from 61.1 to 63! We can update this information\n\n::: {.cell execution_count=39}\n``` {.python .cell-code}\nsouthern_africa[\"Botswana\"] = 63\n\nprint(southern_africa[\"Botswana\"])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n63\n```\n:::\n:::\n\n\nThe value of Botswana has been changed. \n\nWhat if we want to add new information in the dictionary? For example, we may want to add the capital cities of the countries in the `southern_africa` dicitionary:\n\n::: {.cell execution_count=40}\n``` {.python .cell-code}\nsouthern_africa_2 = {\"Angola\": {\"life_expectancy\": 61.6, \"capital\":\"Luanda\"},\n                     \"Botswana\": {\"life_expectancy\": 61.1, \"capital\":\"Gaborone\"},\n                     \"Lesotho\": {\"life_expectancy\": 57.1, \"capital\":\"Maseru\"},\n                     \"Malawi\": {\"life_expectancy\": 53.1, \"capital\":\"Lilongwe\"},\n                     \"Mozambique\": {\"life_expectancy\": 62.9, \"capital\":\"Maputo\"},\n                     \"Namibia\": {\"life_expectancy\": 59.3, \"capital\":\"Windhoek\"}}\n\nprint(southern_africa_2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{'Angola': {'life_expectancy': 61.6, 'capital': 'Luanda'}, 'Botswana': {'life_expectancy': 61.1, 'capital': 'Gaborone'}, 'Lesotho': {'life_expectancy': 57.1, 'capital': 'Maseru'}, 'Malawi': {'life_expectancy': 53.1, 'capital': 'Lilongwe'}, 'Mozambique': {'life_expectancy': 62.9, 'capital': 'Maputo'}, 'Namibia': {'life_expectancy': 59.3, 'capital': 'Windhoek'}}\n```\n:::\n:::\n\n\nAs you can see in the results, the dictionary has been updated. \n\n#### DataFrames\n\nThe previous data structures we have discussed (lists, np.arrays, dictionaries) can handly limited amount of data. In the real world, most data comes big, in a tabular format: with columns and rows. In Python, we use we use the `pandas` package to handle data in a tabular format. You need to install it first:\n\n::: {.cell execution_count=41}\n``` {.python .cell-code}\npip install pandas\n```\n:::\n\n\nThen import `pandas`:\n\n::: {.cell execution_count=42}\n``` {.python .cell-code}\nimport pandas as pd\n```\n:::\n\n\nLet return to the previous lists that we have created: list of Southern African countries and corresponding life expectancy:\n\n::: {.cell execution_count=43}\n``` {.python .cell-code}\ncountry = [\"Angola\", \"Botswana\", \"Lesotho\", \"Malawi\", \"Mozambique\", \"Namibia\", \"South Africa\", \"Swaziland\", \"Zambia\", \"Zimbabwe\"]\n\nprint(country)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['Angola', 'Botswana', 'Lesotho', 'Malawi', 'Mozambique', 'Namibia', 'South Africa', 'Swaziland', 'Zambia', 'Zimbabwe']\n```\n:::\n:::\n\n\nCreate life_expectancy list:\n\n::: {.cell execution_count=44}\n``` {.python .cell-code}\nlife_expectancy = [61.6, 61.1, 57.1, 53.1, 62.9, 59.3, 59.3, 62.3, 61.2, 59.3]\nprint(life_expectancy)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[61.6, 61.1, 57.1, 53.1, 62.9, 59.3, 59.3, 62.3, 61.2, 59.3]\n```\n:::\n:::\n\n\nLet's add one more list of, for example, population of each country:\n\n::: {.cell execution_count=45}\n``` {.python .cell-code}\npopulation = [500, 600, 1000, 150, 490, 740, 300, 781, 610, 504]\n\nprint(population)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[500, 600, 1000, 150, 490, 740, 300, 781, 610, 504]\n```\n:::\n:::\n\n\nFrom these three lists, we can create a DataFrame using `pandas`:\n\n::: {.cell execution_count=46}\n``` {.python .cell-code}\nsouthern_africa_df = pd.DataFrame({\"country_name\":country, \"life_expect\": life_expectancy, \"pop\":population})\n\nprint(southern_africa_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   country_name  life_expect   pop\n0        Angola         61.6   500\n1      Botswana         61.1   600\n2       Lesotho         57.1  1000\n3        Malawi         53.1   150\n4    Mozambique         62.9   490\n5       Namibia         59.3   740\n6  South Africa         59.3   300\n7     Swaziland         62.3   781\n8        Zambia         61.2   610\n9      Zimbabwe         59.3   504\n```\n:::\n:::\n\n\nWe have a DataFrame with three columns: country_name, life_expect, and pop and 10 rows (observations), where each row represent country. You can use the `.head()` function to view the first observations\n\n::: {.cell execution_count=47}\n``` {.python .cell-code}\nprint(southern_africa_df.head())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  country_name  life_expect   pop\n0       Angola         61.6   500\n1     Botswana         61.1   600\n2      Lesotho         57.1  1000\n3       Malawi         53.1   150\n4   Mozambique         62.9   490\n```\n:::\n:::\n\n\nYou can check how many columns and rows in the DataFrame by using `.info()` function:\n\n::: {.cell execution_count=48}\n``` {.python .cell-code}\nprint(southern_africa_df.info())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 10 entries, 0 to 9\nData columns (total 3 columns):\n #   Column        Non-Null Count  Dtype  \n---  ------        --------------  -----  \n 0   country_name  10 non-null     object \n 1   life_expect   10 non-null     float64\n 2   pop           10 non-null     int64  \ndtypes: float64(1), int64(1), object(1)\nmemory usage: 368.0+ bytes\nNone\n```\n:::\n:::\n\n\nYou can get more information of your DataFrame by using `.describe()` function, it will return the summary statistics of all numeric columns:\n\n::: {.cell execution_count=49}\n``` {.python .cell-code}\nprint(southern_africa_df.describe())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       life_expect          pop\ncount    10.000000    10.000000\nmean     59.720000   567.500000\nstd       2.898582   241.687241\nmin      53.100000   150.000000\n25%      59.300000   492.500000\n50%      60.200000   552.000000\n75%      61.500000   707.500000\nmax      62.900000  1000.000000\n```\n:::\n:::\n\n\nYou can subset both rows and columns, to return only those you are interested in. Let's say you want to select only `country_name` and `pop` columns, you can do this by wrapping the DataFrame within double square brackets (`[[]]`) and specify those coulumns:\n\n::: {.cell execution_count=50}\n``` {.python .cell-code}\nprint(southern_africa_df[[\"country_name\", \"pop\"]])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   country_name   pop\n0        Angola   500\n1      Botswana   600\n2       Lesotho  1000\n3        Malawi   150\n4    Mozambique   490\n5       Namibia   740\n6  South Africa   300\n7     Swaziland   781\n8        Zambia   610\n9      Zimbabwe   504\n```\n:::\n:::\n\n\nYou can also select rows. For example, subset observations from Angola and save as a new DataFrame named `angola`:\n\n::: {.cell execution_count=51}\n``` {.python .cell-code}\nangola = southern_africa_df[southern_africa_df[\"country_name\"] == \"Angola\"]\n\nprint(angola)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  country_name  life_expect  pop\n0       Angola         61.6  500\n```\n:::\n:::\n\n\nSelect observations from Angola and Zimbabwe:\n\n::: {.cell execution_count=52}\n``` {.python .cell-code}\nangola_zim = southern_africa_df[southern_africa_df[\"country_name\"].isin([\"Angola\", \"Zimbabwe\"])]\nprint(angola_zim)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  country_name  life_expect  pop\n0       Angola         61.6  500\n9     Zimbabwe         59.3  504\n```\n:::\n:::\n\n\nSubset observations where life expectancy is below 60:\n\n::: {.cell execution_count=53}\n``` {.python .cell-code}\nlow_life_expect = southern_africa_df[southern_africa_df[\"life_expect\"] < 60]\n\nprint(low_life_expect)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   country_name  life_expect   pop\n2       Lesotho         57.1  1000\n3        Malawi         53.1   150\n5       Namibia         59.3   740\n6  South Africa         59.3   300\n9      Zimbabwe         59.3   504\n```\n:::\n:::\n\n\nThere are many other ways in which you can manipulate, transform and analyse DataFrame, and `pandas` provide many methods to handle DataFrames. We will dive deepr into DataFrames and Pandas in [Week 3](week-3.qmd)\n\n\nIn this chapter we have discussed different data structures that can hold data:\n\n- Lists\n\n- Numpy Arrays\n\n- Dictionaries\n\n- DataFrames\n\nIn the next chapter, we explore various ways in which we can visualise data. \n\n",
    "supporting": [
      "week-1b_files"
    ],
    "filters": [],
    "includes": {}
  }
}