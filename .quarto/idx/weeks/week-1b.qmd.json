{"title":"2 Data Structures in Python","markdown":{"yaml":{"title":"2 Data Structures in Python","code-copy":true,"code-line-numbers":true,"tidy":true},"headingText":"Lists","containsRefs":false,"markdown":"\nIn this chapter we deal with different data structures that can hold data in Python. Specifically, we will focus on the follwoing data structures:\n\n- Lists\n\n- Tuples\n\n- Dictionaries\n\n- DataFrames\n\n\n\nList is a data structure that store a collection of elements/items within it. For example, in [previous chapter](week-1a.qmd) we created a string variable named `country` that contained \"South Africa\"  element:\n\n```{python}\ncountry = \"South Africa\"\n\nprint(country)\n```\n\nWhat if we wanted to create another country variable, named country_2 with \"Zimbabwe\" as an element? We can also do this:\n\n```{python}\n\ncountry_2 = \"Zimbabwe\"\nprint(country_2)\n```\n\nWhat if we want to add country_3, country_4, etc? We can end up having many variables. This where lists come in. Lists are used to hold many items together. you can create lists in Python by using square barackets (`[]`):\n\n```{python}\nsouthern_african_countries = [\"Angola\", \"Botswana\", \"Lesotho\", \"Malawi\", \"Mozambique\", \"Namibia\", \"South Africa\", \"Swaziland\", \"Zambia\", \"Zimbabwe\"]\n\nprint(southern_african_countries)\n```\n\nWe now have a list of all countries in the Southern African region. There are various functions that can be used to extract, analyse and manipulate elements in a list. For example, you may be interested on how many elements are in a lists; in our case, how many countries are in the `southern_african_countries` list. You can use the `len()` function:\n\n```{python}\nsouthern_african_countries = [\"Angola\", \"Botswana\", \"Lesotho\", \"Malawi\", \"Mozambique\", \"Namibia\", \"South Africa\", \"Swaziland\", \"Zambia\", \"Zimbabwe\"]\n\nprint(len(southern_african_countries))\n```\n\nThe list has 10 elements/items. \n\n\n#### Subset a list\n\nYou can extract the list item by using the `[]` and the index position of the item. Note that Python index start at 0, meaning the first element will be in the position 0. This is important especially when coming from R background. Let extract the first element:\n\n```{python}\nprint(southern_african_countries[0])\n```\n\nThe first element is Angola. \n\nYou can use can access the last element by:\n\n```{python}\nprint(southern_african_countries[-1])\n```\n\nYou can access more than 1 items; for example, extract the first, second and third items in the list by slicing:\n\n```{python}\nprint(southern_african_countries[0:3])\n```\n\nNotice that we have included the index `3`, which is the 4th item, although the element itself is not printed. When slicing a list, the last index mentioned is not included. This is very importnt to note. There are other slicing options:\n\n```{python}\nprint(southern_african_countries[:3])\n```\n\n#### Manipulate a list\n\nList elements can be changed. For example, in 2018 Zwaziland changed their name to \"eSwatini\". We can change this in a list. First re-create the list:\n\n```{python}\nsouthern_african_countries = [\"Angola\", \"Botswana\", \"Lesotho\", \"Malawi\", \"Mozambique\", \"Namibia\", \"South Africa\", \"Swaziland\", \"Zambia\", \"Zimbabwe\"]\n\nprint(southern_african_countries)\n\n```\n\nThen change the list element:\n\n```{python}\nsouthern_african_countries[7] = \"eSwatini\"\nprint(southern_african_countries)\n```\n\nWe have changed the list element from \"Swaziland\" to \"Eswatini\".\n\nYou can also **add** new elements in a list. Suppose a geographer told us that our list of Southern African countries missed 3 countries:  Democratic Republic of the Congo, Mauritius, Madagascar and Seychelles. In Python, we can update our list and assign it to anew variable called `southern_africa_updated`. First find the length of the original `southern_african_countries`:\n\n```{python}\nlen(southern_african_countries)\n```\n\nAdd new items:\n\n```{python}\nsouthern_africa_updated = southern_african_countries + [\"Democratic Republic of the Congo\", \"Mauritius\", \"Madagascar\", \"Seychelles\"]\n\nprint(southern_africa_updated)\n```\n\nFind the lenght of the updated variable:\n\n```{python}\nlen(southern_africa_updated)\n```\n\nThe updated variable has lenght of 14. This means we have added 4 items.\n\nYou can remove an element from the list by using `del()` function:\n\n```{python}\ndel southern_africa_updated[0]\n\nprint(southern_africa_updated)\n```\nWe have removed the element at the index 0, which is Botswana.\n\n\n#### Manipulating list with numeric data\n\nIn above examples we have worked with list that contain string data types: all out elements were string (country names). Suppose we have the life expectancy of those countries. Life expectancy is the average number of years is expected to live:\n\nLet us create a numeric list, that we name `life_expectancy`, that has the average life expectancy of the countries of Southern Africa:\n\n```{python}\nlife_expectancy = [61.6, 61.1, 57.1, 53.1, 62.9, 59.3, 59.3, 62.3, 61.2, 59.3]\n\nprint(life_expectancy)\n```\n\nWe can find the **minimum** life expactancy:\n```{python}\nprint(min(life_expectancy))\n```\n\nPrint the **maximum** life expectancy:\n\n```{python}\nprint(max(life_expectancy))\n```\n\n\nNot that a list can hold elements of of different data types: string, float, integer, boolean, etc.\n\n```{python}\n person_1 = [\"Name\", \"Aubrey\", \"Age\", 32, \"Height\", 1.8, \"Is male?\", True]\n print(person_1)\n ```\n\n#### NumPy Arrays\n\nA NumPy array is a data structure that can hold numeic elements. It is short for Numeric Python. It is an important data structure if you want to manipulate numeric data. First, you will need to install the `numpy` package if not already installed:\n\n```{python}\n#| eval: false\npip install numpy\n```\n\nThen load the library as:\n\n```{python}\nimport numpy as np\n```\n\nSuppose we have the lenght in kilometers of major South Africa rivers stored as a list and assigned it to `river_lenght_km` variable:\n\n```{python}\nriver_lenght_km = [2200, 1800, 1210, 502, 560, 645, 520, 480]\nprint(river_lenght_km)\n```\n\nWe need to convert this lift into an numpy array:\n\n```{python}\n\nriver_lenght_km = np.array(river_lenght_km)\n\nprint(type(river_lenght_km))\n```\n\n\n##### Summary statistics and mathematical operations\n\nThere many functions within the `numpy` library. We can calculate summary statistics:\n\nGet the mean/average:\n\n```{python}\nprint(np.mean(river_lenght_km))\n```\n\nGet the median:\n\n```{python}\nprint(np.median(river_lenght_km))\n```\n\nGet the standard deviation:\n\n```{python}\nprint(np.std(river_lenght_km))\n```\n\nThere are other functions you can use. \n\nWhat are the rivers that have lenght of greater than 1000 kilometers? Find these and assign the result to a variable named longest_rivers\n\n```{python}\nlongest_rivers = river_lenght_km[river_lenght_km > 1000]\nprint(longest_rivers)\n```\n\nThe `river_lenght_km` array is in kilometers. What if we want to convert to meters? Since 1 km = 1000 meters, you can convert kilometer to meter by multplying by 1000 since. Let's do this and assign result to a new variable named river_lenght_meters\n\n```{python}\nriver_lenght_meters = river_lenght_km * 1000\n\nprint(river_lenght_meters)\n```\n\n\nJust like lists, you can subsets numpy arrays using index positions of the element. To acces the second element of `river_lenght_km`: \n\n```{python}\nprint(river_lenght_km[1])\n```\n\nYou can sort elements into ascending or descending order:\n\n```{python}\nnp.sort(river_lenght_km)\n```\n\nSort into descending\n\n```{python}\nnp.sort(river_lenght_km)[::-1]\n```\n\nNote that NumPy arrays can also be 2 dimensional; 2D arrays is a matrix like data with rows and columns:\n\n```{python}\ntwo_d_array = np.array([[1, 2, 3],\n                   [4, 5, 6],\n                   [7, 8, 9]])\n\nprint(two_d_array)\n```\n\n### Dictionaries\n\nRemeember we created two lists previously, `southern_african_countries` and `life_expectancy`. \n\n```{python}\nsouthern_african_countries = [\"Angola\", \"Botswana\", \"Lesotho\", \"Malawi\", \"Mozambique\", \"Namibia\", \"South Africa\", \"Swaziland\", \"Zambia\", \"Zimbabwe\"]\n\nprint(southern_african_countries)\n\nlife_expectancy = [61.6, 61.1, 57.1, 53.1, 62.9, 59.3, 59.3, 62.3, 61.2, 59.3]\n\nprint(life_expectancy)\n```\n\nWe can find the corresponding life expectancy of, for example, \"Botswana\". First find the index position of Botswana:\n\n```{python}\n\nbotswana_index = southern_african_countries.index(\"Botswana\")\n\nprint(botswana_index)\n```\n\nThe index of Botswana is 1. We can access the corresposing life expectancy:\n\n```{python}\nlife_expectancy[botswana_index]\n```\n\nThe life expectancy of Botswana. But this is not efficient if we have large data. This where dictionaries come in:\n\n```{python}\nsouthern_africa = {\"Angola\":61.6, \n                   \"Botswana\":61.1,\n                   \"Lesotho\":57.1,\n                   \"Malawi\":53.1,\n                   \"Mozambique\":62.9,\n                   \"Namibia\":59.3}\n\nprint(southern_africa)\n```\n\nWe have created a dictionary named southern_africa. A dictionary has `keys` and `values` and this is always in pairs. For example, we have `Angola` as a key with its corresponding value `61.6`. \n\nYou can find values of each keys:\n\n```{python}\nprint(southern_africa[\"Malawi\"])\n```\n\n\nOf Namibia:\n\n```{python}\nprint(southern_africa[\"Namibia\"])\n```\n\nYou can find keys of all keys:\n\n```{python}\nprint(southern_africa.keys())\n```\n\nIf you look at the `southern_africa` dictionary, we did not include all other countries in the region. We may need to add, let say, Zimbabwe:\n\n```{python}\nsouthern_africa[\"Zimbabwe\"] = 59.3\n\nprint(southern_africa)\n```\n\nYou can see that the dictionary has been updated to include Zimbwabwe.\n\nSuppose  demographer pouint out that the values of Botswana is outdated; that the life expectancy of the country has increased from 61.1 to 63! We can update this information\n\n```{python}\nsouthern_africa[\"Botswana\"] = 63\n\nprint(southern_africa[\"Botswana\"])\n```\n\nThe value of Botswana has been changed. \n\nWhat if we want to add new information in the dictionary? For example, we may want to add the capital cities of the countries in the `southern_africa` dicitionary:\n\n```{python}\nsouthern_africa_2 = {\"Angola\": {\"life_expectancy\": 61.6, \"capital\":\"Luanda\"},\n                     \"Botswana\": {\"life_expectancy\": 61.1, \"capital\":\"Gaborone\"},\n                     \"Lesotho\": {\"life_expectancy\": 57.1, \"capital\":\"Maseru\"},\n                     \"Malawi\": {\"life_expectancy\": 53.1, \"capital\":\"Lilongwe\"},\n                     \"Mozambique\": {\"life_expectancy\": 62.9, \"capital\":\"Maputo\"},\n                     \"Namibia\": {\"life_expectancy\": 59.3, \"capital\":\"Windhoek\"}}\n\nprint(southern_africa_2)\n```\n\nAs you can see in the results, the dictionary has been updated. \n\n#### DataFrames\n\nThe previous data structures we have discussed (lists, np.arrays, dictionaries) can handly limited amount of data. In the real world, most data comes big, in a tabular format: with columns and rows. In Python, we use we use the `pandas` package to handle data in a tabular format. You need to install it first:\n\n```{python}\n#| eval: false\npip install pandas\n```\n\n\nThen import `pandas`:\n\n```{python}\nimport pandas as pd\n```\n\nLet return to the previous lists that we have created: list of Southern African countries and corresponding life expectancy:\n\n```{python}\n\ncountry = [\"Angola\", \"Botswana\", \"Lesotho\", \"Malawi\", \"Mozambique\", \"Namibia\", \"South Africa\", \"Swaziland\", \"Zambia\", \"Zimbabwe\"]\n\nprint(country)\n```\n\n\nCreate life_expectancy list:\n\n```{python}\nlife_expectancy = [61.6, 61.1, 57.1, 53.1, 62.9, 59.3, 59.3, 62.3, 61.2, 59.3]\nprint(life_expectancy)\n```\n\nLet's add one more list of, for example, population of each country:\n\n```{python}\npopulation = [500, 600, 1000, 150, 490, 740, 300, 781, 610, 504]\n\nprint(population)\n```\n\nFrom these three lists, we can create a DataFrame using `pandas`:\n\n```{python}\nsouthern_africa_df = pd.DataFrame({\"country_name\":country, \"life_expect\": life_expectancy, \"pop\":population})\n\nprint(southern_africa_df)\n```\n\nWe have a DataFrame with three columns: country_name, life_expect, and pop and 10 rows (observations), where each row represent country. You can use the `.head()` function to view the first observations\n\n\n```{python}\nprint(southern_africa_df.head())\n```\nYou can check how many columns and rows in the DataFrame by using `.info()` function:\n\n```{python}\nprint(southern_africa_df.info())\n```\n\nYou can get more information of your DataFrame by using `.describe()` function, it will return the summary statistics of all numeric columns:\n\n```{python}\nprint(southern_africa_df.describe())\n```\n\nYou can subset both rows and columns, to return only those you are interested in. Let's say you want to select only `country_name` and `pop` columns, you can do this by wrapping the DataFrame within double square brackets (`[[]]`) and specify those coulumns:\n\n```{python}\nprint(southern_africa_df[[\"country_name\", \"pop\"]])\n```\n\nYou can also select rows. For example, subset observations from Angola and save as a new DataFrame named `angola`:\n\n```{python}\nangola = southern_africa_df[southern_africa_df[\"country_name\"] == \"Angola\"]\n\nprint(angola)\n```\nSelect observations from Angola and Zimbabwe:\n\n```{python}\nangola_zim = southern_africa_df[southern_africa_df[\"country_name\"].isin([\"Angola\", \"Zimbabwe\"])]\nprint(angola_zim)\n```\n\nSubset observations where life expectancy is below 60:\n\n```{python}\nlow_life_expect = southern_africa_df[southern_africa_df[\"life_expect\"] < 60]\n\nprint(low_life_expect)\n```\n\nThere are many other ways in which you can manipulate, transform and analyse DataFrame, and `pandas` provide many methods to handle DataFrames. We will dive deepr into DataFrames and Pandas in [Week 3](week-3.qmd)\n\n\nIn this chapter we have discussed different data structures that can hold data:\n\n- Lists\n\n- Numpy Arrays\n\n- Dictionaries\n\n- DataFrames\n\nIn the next chapter, we explore various ways in which we can visualise data. \n","srcMarkdownNoYaml":"\nIn this chapter we deal with different data structures that can hold data in Python. Specifically, we will focus on the follwoing data structures:\n\n- Lists\n\n- Tuples\n\n- Dictionaries\n\n- DataFrames\n\n\n### Lists\n\nList is a data structure that store a collection of elements/items within it. For example, in [previous chapter](week-1a.qmd) we created a string variable named `country` that contained \"South Africa\"  element:\n\n```{python}\ncountry = \"South Africa\"\n\nprint(country)\n```\n\nWhat if we wanted to create another country variable, named country_2 with \"Zimbabwe\" as an element? We can also do this:\n\n```{python}\n\ncountry_2 = \"Zimbabwe\"\nprint(country_2)\n```\n\nWhat if we want to add country_3, country_4, etc? We can end up having many variables. This where lists come in. Lists are used to hold many items together. you can create lists in Python by using square barackets (`[]`):\n\n```{python}\nsouthern_african_countries = [\"Angola\", \"Botswana\", \"Lesotho\", \"Malawi\", \"Mozambique\", \"Namibia\", \"South Africa\", \"Swaziland\", \"Zambia\", \"Zimbabwe\"]\n\nprint(southern_african_countries)\n```\n\nWe now have a list of all countries in the Southern African region. There are various functions that can be used to extract, analyse and manipulate elements in a list. For example, you may be interested on how many elements are in a lists; in our case, how many countries are in the `southern_african_countries` list. You can use the `len()` function:\n\n```{python}\nsouthern_african_countries = [\"Angola\", \"Botswana\", \"Lesotho\", \"Malawi\", \"Mozambique\", \"Namibia\", \"South Africa\", \"Swaziland\", \"Zambia\", \"Zimbabwe\"]\n\nprint(len(southern_african_countries))\n```\n\nThe list has 10 elements/items. \n\n\n#### Subset a list\n\nYou can extract the list item by using the `[]` and the index position of the item. Note that Python index start at 0, meaning the first element will be in the position 0. This is important especially when coming from R background. Let extract the first element:\n\n```{python}\nprint(southern_african_countries[0])\n```\n\nThe first element is Angola. \n\nYou can use can access the last element by:\n\n```{python}\nprint(southern_african_countries[-1])\n```\n\nYou can access more than 1 items; for example, extract the first, second and third items in the list by slicing:\n\n```{python}\nprint(southern_african_countries[0:3])\n```\n\nNotice that we have included the index `3`, which is the 4th item, although the element itself is not printed. When slicing a list, the last index mentioned is not included. This is very importnt to note. There are other slicing options:\n\n```{python}\nprint(southern_african_countries[:3])\n```\n\n#### Manipulate a list\n\nList elements can be changed. For example, in 2018 Zwaziland changed their name to \"eSwatini\". We can change this in a list. First re-create the list:\n\n```{python}\nsouthern_african_countries = [\"Angola\", \"Botswana\", \"Lesotho\", \"Malawi\", \"Mozambique\", \"Namibia\", \"South Africa\", \"Swaziland\", \"Zambia\", \"Zimbabwe\"]\n\nprint(southern_african_countries)\n\n```\n\nThen change the list element:\n\n```{python}\nsouthern_african_countries[7] = \"eSwatini\"\nprint(southern_african_countries)\n```\n\nWe have changed the list element from \"Swaziland\" to \"Eswatini\".\n\nYou can also **add** new elements in a list. Suppose a geographer told us that our list of Southern African countries missed 3 countries:  Democratic Republic of the Congo, Mauritius, Madagascar and Seychelles. In Python, we can update our list and assign it to anew variable called `southern_africa_updated`. First find the length of the original `southern_african_countries`:\n\n```{python}\nlen(southern_african_countries)\n```\n\nAdd new items:\n\n```{python}\nsouthern_africa_updated = southern_african_countries + [\"Democratic Republic of the Congo\", \"Mauritius\", \"Madagascar\", \"Seychelles\"]\n\nprint(southern_africa_updated)\n```\n\nFind the lenght of the updated variable:\n\n```{python}\nlen(southern_africa_updated)\n```\n\nThe updated variable has lenght of 14. This means we have added 4 items.\n\nYou can remove an element from the list by using `del()` function:\n\n```{python}\ndel southern_africa_updated[0]\n\nprint(southern_africa_updated)\n```\nWe have removed the element at the index 0, which is Botswana.\n\n\n#### Manipulating list with numeric data\n\nIn above examples we have worked with list that contain string data types: all out elements were string (country names). Suppose we have the life expectancy of those countries. Life expectancy is the average number of years is expected to live:\n\nLet us create a numeric list, that we name `life_expectancy`, that has the average life expectancy of the countries of Southern Africa:\n\n```{python}\nlife_expectancy = [61.6, 61.1, 57.1, 53.1, 62.9, 59.3, 59.3, 62.3, 61.2, 59.3]\n\nprint(life_expectancy)\n```\n\nWe can find the **minimum** life expactancy:\n```{python}\nprint(min(life_expectancy))\n```\n\nPrint the **maximum** life expectancy:\n\n```{python}\nprint(max(life_expectancy))\n```\n\n\nNot that a list can hold elements of of different data types: string, float, integer, boolean, etc.\n\n```{python}\n person_1 = [\"Name\", \"Aubrey\", \"Age\", 32, \"Height\", 1.8, \"Is male?\", True]\n print(person_1)\n ```\n\n#### NumPy Arrays\n\nA NumPy array is a data structure that can hold numeic elements. It is short for Numeric Python. It is an important data structure if you want to manipulate numeric data. First, you will need to install the `numpy` package if not already installed:\n\n```{python}\n#| eval: false\npip install numpy\n```\n\nThen load the library as:\n\n```{python}\nimport numpy as np\n```\n\nSuppose we have the lenght in kilometers of major South Africa rivers stored as a list and assigned it to `river_lenght_km` variable:\n\n```{python}\nriver_lenght_km = [2200, 1800, 1210, 502, 560, 645, 520, 480]\nprint(river_lenght_km)\n```\n\nWe need to convert this lift into an numpy array:\n\n```{python}\n\nriver_lenght_km = np.array(river_lenght_km)\n\nprint(type(river_lenght_km))\n```\n\n\n##### Summary statistics and mathematical operations\n\nThere many functions within the `numpy` library. We can calculate summary statistics:\n\nGet the mean/average:\n\n```{python}\nprint(np.mean(river_lenght_km))\n```\n\nGet the median:\n\n```{python}\nprint(np.median(river_lenght_km))\n```\n\nGet the standard deviation:\n\n```{python}\nprint(np.std(river_lenght_km))\n```\n\nThere are other functions you can use. \n\nWhat are the rivers that have lenght of greater than 1000 kilometers? Find these and assign the result to a variable named longest_rivers\n\n```{python}\nlongest_rivers = river_lenght_km[river_lenght_km > 1000]\nprint(longest_rivers)\n```\n\nThe `river_lenght_km` array is in kilometers. What if we want to convert to meters? Since 1 km = 1000 meters, you can convert kilometer to meter by multplying by 1000 since. Let's do this and assign result to a new variable named river_lenght_meters\n\n```{python}\nriver_lenght_meters = river_lenght_km * 1000\n\nprint(river_lenght_meters)\n```\n\n\nJust like lists, you can subsets numpy arrays using index positions of the element. To acces the second element of `river_lenght_km`: \n\n```{python}\nprint(river_lenght_km[1])\n```\n\nYou can sort elements into ascending or descending order:\n\n```{python}\nnp.sort(river_lenght_km)\n```\n\nSort into descending\n\n```{python}\nnp.sort(river_lenght_km)[::-1]\n```\n\nNote that NumPy arrays can also be 2 dimensional; 2D arrays is a matrix like data with rows and columns:\n\n```{python}\ntwo_d_array = np.array([[1, 2, 3],\n                   [4, 5, 6],\n                   [7, 8, 9]])\n\nprint(two_d_array)\n```\n\n### Dictionaries\n\nRemeember we created two lists previously, `southern_african_countries` and `life_expectancy`. \n\n```{python}\nsouthern_african_countries = [\"Angola\", \"Botswana\", \"Lesotho\", \"Malawi\", \"Mozambique\", \"Namibia\", \"South Africa\", \"Swaziland\", \"Zambia\", \"Zimbabwe\"]\n\nprint(southern_african_countries)\n\nlife_expectancy = [61.6, 61.1, 57.1, 53.1, 62.9, 59.3, 59.3, 62.3, 61.2, 59.3]\n\nprint(life_expectancy)\n```\n\nWe can find the corresponding life expectancy of, for example, \"Botswana\". First find the index position of Botswana:\n\n```{python}\n\nbotswana_index = southern_african_countries.index(\"Botswana\")\n\nprint(botswana_index)\n```\n\nThe index of Botswana is 1. We can access the corresposing life expectancy:\n\n```{python}\nlife_expectancy[botswana_index]\n```\n\nThe life expectancy of Botswana. But this is not efficient if we have large data. This where dictionaries come in:\n\n```{python}\nsouthern_africa = {\"Angola\":61.6, \n                   \"Botswana\":61.1,\n                   \"Lesotho\":57.1,\n                   \"Malawi\":53.1,\n                   \"Mozambique\":62.9,\n                   \"Namibia\":59.3}\n\nprint(southern_africa)\n```\n\nWe have created a dictionary named southern_africa. A dictionary has `keys` and `values` and this is always in pairs. For example, we have `Angola` as a key with its corresponding value `61.6`. \n\nYou can find values of each keys:\n\n```{python}\nprint(southern_africa[\"Malawi\"])\n```\n\n\nOf Namibia:\n\n```{python}\nprint(southern_africa[\"Namibia\"])\n```\n\nYou can find keys of all keys:\n\n```{python}\nprint(southern_africa.keys())\n```\n\nIf you look at the `southern_africa` dictionary, we did not include all other countries in the region. We may need to add, let say, Zimbabwe:\n\n```{python}\nsouthern_africa[\"Zimbabwe\"] = 59.3\n\nprint(southern_africa)\n```\n\nYou can see that the dictionary has been updated to include Zimbwabwe.\n\nSuppose  demographer pouint out that the values of Botswana is outdated; that the life expectancy of the country has increased from 61.1 to 63! We can update this information\n\n```{python}\nsouthern_africa[\"Botswana\"] = 63\n\nprint(southern_africa[\"Botswana\"])\n```\n\nThe value of Botswana has been changed. \n\nWhat if we want to add new information in the dictionary? For example, we may want to add the capital cities of the countries in the `southern_africa` dicitionary:\n\n```{python}\nsouthern_africa_2 = {\"Angola\": {\"life_expectancy\": 61.6, \"capital\":\"Luanda\"},\n                     \"Botswana\": {\"life_expectancy\": 61.1, \"capital\":\"Gaborone\"},\n                     \"Lesotho\": {\"life_expectancy\": 57.1, \"capital\":\"Maseru\"},\n                     \"Malawi\": {\"life_expectancy\": 53.1, \"capital\":\"Lilongwe\"},\n                     \"Mozambique\": {\"life_expectancy\": 62.9, \"capital\":\"Maputo\"},\n                     \"Namibia\": {\"life_expectancy\": 59.3, \"capital\":\"Windhoek\"}}\n\nprint(southern_africa_2)\n```\n\nAs you can see in the results, the dictionary has been updated. \n\n#### DataFrames\n\nThe previous data structures we have discussed (lists, np.arrays, dictionaries) can handly limited amount of data. In the real world, most data comes big, in a tabular format: with columns and rows. In Python, we use we use the `pandas` package to handle data in a tabular format. You need to install it first:\n\n```{python}\n#| eval: false\npip install pandas\n```\n\n\nThen import `pandas`:\n\n```{python}\nimport pandas as pd\n```\n\nLet return to the previous lists that we have created: list of Southern African countries and corresponding life expectancy:\n\n```{python}\n\ncountry = [\"Angola\", \"Botswana\", \"Lesotho\", \"Malawi\", \"Mozambique\", \"Namibia\", \"South Africa\", \"Swaziland\", \"Zambia\", \"Zimbabwe\"]\n\nprint(country)\n```\n\n\nCreate life_expectancy list:\n\n```{python}\nlife_expectancy = [61.6, 61.1, 57.1, 53.1, 62.9, 59.3, 59.3, 62.3, 61.2, 59.3]\nprint(life_expectancy)\n```\n\nLet's add one more list of, for example, population of each country:\n\n```{python}\npopulation = [500, 600, 1000, 150, 490, 740, 300, 781, 610, 504]\n\nprint(population)\n```\n\nFrom these three lists, we can create a DataFrame using `pandas`:\n\n```{python}\nsouthern_africa_df = pd.DataFrame({\"country_name\":country, \"life_expect\": life_expectancy, \"pop\":population})\n\nprint(southern_africa_df)\n```\n\nWe have a DataFrame with three columns: country_name, life_expect, and pop and 10 rows (observations), where each row represent country. You can use the `.head()` function to view the first observations\n\n\n```{python}\nprint(southern_africa_df.head())\n```\nYou can check how many columns and rows in the DataFrame by using `.info()` function:\n\n```{python}\nprint(southern_africa_df.info())\n```\n\nYou can get more information of your DataFrame by using `.describe()` function, it will return the summary statistics of all numeric columns:\n\n```{python}\nprint(southern_africa_df.describe())\n```\n\nYou can subset both rows and columns, to return only those you are interested in. Let's say you want to select only `country_name` and `pop` columns, you can do this by wrapping the DataFrame within double square brackets (`[[]]`) and specify those coulumns:\n\n```{python}\nprint(southern_africa_df[[\"country_name\", \"pop\"]])\n```\n\nYou can also select rows. For example, subset observations from Angola and save as a new DataFrame named `angola`:\n\n```{python}\nangola = southern_africa_df[southern_africa_df[\"country_name\"] == \"Angola\"]\n\nprint(angola)\n```\nSelect observations from Angola and Zimbabwe:\n\n```{python}\nangola_zim = southern_africa_df[southern_africa_df[\"country_name\"].isin([\"Angola\", \"Zimbabwe\"])]\nprint(angola_zim)\n```\n\nSubset observations where life expectancy is below 60:\n\n```{python}\nlow_life_expect = southern_africa_df[southern_africa_df[\"life_expect\"] < 60]\n\nprint(low_life_expect)\n```\n\nThere are many other ways in which you can manipulate, transform and analyse DataFrame, and `pandas` provide many methods to handle DataFrames. We will dive deepr into DataFrames and Pandas in [Week 3](week-3.qmd)\n\n\nIn this chapter we have discussed different data structures that can hold data:\n\n- Lists\n\n- Numpy Arrays\n\n- Dictionaries\n\n- DataFrames\n\nIn the next chapter, we explore various ways in which we can visualise data. \n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":true,"code-line-numbers":true,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","filters":["../include-files.lua","quarto"],"css":["../styles.css"],"toc":true,"output-file":"week-1b.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.433","theme":{"light":"cosmo","dark":["cosmo","../theme-dark.scss"]},"code-background":true,"code-copy":true,"title":"2 Data Structures in Python","tidy":true},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}