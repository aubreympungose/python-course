---
title: "4 Data Wrangling and Manipulation"
code-copy: true
code-line-numbers: true
tidy: true
code-annotations: below
---


# 4.1 PART I

## Learning objectives

-   Understand DataFrames

-   Manipulate, transform and analyse DataFrames

## 4.1.1 Introduction

Dataframes, as we saw [the previous section](week-2.qmd), is a tabular data format, with columns and rows. Columns are *variable* names and rows are individual *observations*. Just like other data structures dicussed in previous chapters, a DataFrame handles different data types:
- int64: whole numbers (e.g age = 30)

- float64; numbers with decimals (e.g. height = 1.9, temperature = 33.0)

- datetime64: date and time

- category: catogories or factors (e.g. gender = male, female; race = black, white, ...)

- bool: True or False

- object: string 


According to Hadley Wickman, a DataFrame should be in a *tidy* format:

> 1.  Each variable is a column; each column is a variable.
> 2.  Each observation is row; each row is an observation.
> 3.  Each value is a cell; each cell is a single value. 


The pandas package provide a toolbox of working analysing, querying and transforming DataFrames. We will continue working with the `gapminder dataset. First load pandas and read the data, saving it as "gapminder":

```{python}
import pandas as pd

gapminder = pd.read_csv("https://raw.githubusercontent.com/aubreympungose/data-science-course/main/weeks/data/gapminder.csv")
```


Let's examine the data by looking at few observations:

```{python}
gapminder.head()
```

You can check how many variables are in the data and what type of data:

```{python}
gapminder.info()
```

You can see that `gapminder` has 6 columns and 1704 rows. The columns in the dataset are:

- country: Simply the country

- continent: Continent

- year: The year data was collected

- lifeExp: Life expectancy of a country in year

- pop: Population of the country in a year

- gdpPercap: Gross Domestic Product of a country in a year


You can also print the columns in the dataset by using `.columns` attribute. 

```{python}
gapminder.columns
```
You can get the number of rows by using `.index` attribute:

```{python}
gapminder.index
```


## MANIPULATING COLUMNS

#### Access/Select columns

We may be interested in some of the columns in the `gampminder` dataframe, let say, for example, "country" only. You can select a specific column by taking  the name of the DataFrame, followed by square brackets (`[]`) and passing the name of the "column" inside square brackets:

```{python}
gapminder["country"]
```

To Access multiple, columns you follow the same method as above, except that you wrap column names list (`[]`), so you end up with double sqaure brackets. Let's say we want to select "country", "pop", and "year" columns:

```{python}
gapminder[["country", "pop", "year"]]
```


You can alse access columns by their index using `.iloc()` function. Remember that an index in Python starts at 0, for example, to access the first column

```{python}
gapminder.iloc[:, 0]
```

In the above code, the colon (`:`) specify that we want to retun all rows; you will more abouth this when selecting by both columns and rows.

To access multiple columns, you pass a list of indexes of columns. For example, select the 1st, 3rd and 5th columns:

```{python}
gapminder.iloc[:, [0, 2, 4]]
```

Suppose you want access a range of of columns, for example, from the 1st to the 3rd column:

```{python}
gapminder.iloc[:, 0:3]
```

### Rename columns

You may need to change column names. For example, in the `gapminder` dataset, we may change the "pop" column to population. You will use the `.rename()` function, pass the column argument, and specify column names within the dictionary (`{"old_name":"new_name"}`). We will assign the results to the new DataFrame named `gapminder_new`:

```{python}
gapminder_new = gapminder.rename(columns = {"pop":"population"})

gapminder_new.head()
```

The "pop" column has been changed to "population".

You can also rename multiple columns; in this case, rename "lifeExp" and "gdpPercap":

```{python}
gapminder_new = gapminder.rename(columns = {"lifeExp":"life_expectancy", "gdpPercap":"gdp_pc"})

gapminder_new.head()
```

### Making new columns, Removing columns

To create a new column you simply take the name of the dataframe, pass the string of the new columnn inside sqaure bracket, and assign values:

```{python}
gapminder["new_column"] = 20

gapminder.head()
```
There is a new column added that has values of 20. 

In many cases, we may need to create a new column resulting from manipulating other columns. For example, we know that the GDP per capita is calculated from dividing the total GDP by a population. If we want to create a new column of the total GDP, we need to multiply GDP per capita by the population size of the country:

```{python}
gapminder["total_gdp"] = gapminder["gdpPercap"] * gapminder["pop"]

gapminder.head()
```

We have a new column ("total_gdp") added to the `gapminder` DataFrame. 

You can remove columns by using `.drop() function:

```{python}
gapminder = gapminder.drop(["total_gdp", "new_column"], axis = 1)

gapminder.head()
```



## Manipulate Rows
You can rows by any column by using `.sort_values()` function:

```{python}
gapminder.sort_values(["lifeExp"])
```

You can see that Rwanda had the lowest life expectancy. 

To sort values into descending order (highest to lowest), you pass `ascending = False`:

```{python}
gapminder.sort_values(["pop"], ascending = False)
```

You can see that China had the highest population.


You may be interested in observations/rows that meet certain conditions. For example, in the gapminder data, you may need to keel all observations from the African continent, and save as a new DataFrame called `gapminder_africa`:

```{python}

gapminder_africa = gapminder[gapminder["continent"] ==  "Africa"]

gapminder_africa.head()
```

Filter all the observations that are in the year 2007 and ave it as `gapminder_2007:

```{python}

gapminder_2007 = gapminder[gapminder["year"] == 2007]

gapminder_2007.head()
```

::: {.callout-note}
Note that we are using the equal operator `==` operator not the assignment `=` operator to filter rows. Most beginners will confuse the two.
:::

when filtering rows, you are using boolean operators:

- `==`: equal to

- `!=`: not equal to

- `>`: greater than

- `<`: less than

- `>=`: greater than or equal to

- `<=`: less than or equal to

You can also filter rows by combining 2 conditions. Let us say we want:

- countries in Africa

- the year 2007

and save as `africa_2007`:

```{python}
africa_2007 = gapminder[(gapminder["continent"] == "Africa")  & (gapminder["year"] == 2007)]
africa_2007.head()
```

Sometimes you may need to filter multiple rows, let say, more than 5 countries. It would be inconvinient to type `country == "..."` five times. This is where the `.isin()` function is useful; you pass the list of observations you want. We will work with with observations from the year 2007.

```{python}
gapminder_2007 = gapminder[gapminder["year"] == 2007]

countries = gapminder_2007[gapminder_2007["country"].isin(["China", "Brazil", "India", "South Africa"])]

countries.head()
```

You can also filter rows by using their index positions, let say, the 1st and 3rd rows:

```{python}
gapminder.iloc[[0, 4]]
```

You can also filter a range of rows For example, we may select top 10 countries with the highes population in 2007. So we will use the `gapminder_2007` DataFrame. You will need to arrange by population first

```{python}
gapminder_2007 = gapminder_2007.sort_values(["pop"], ascending = False)
gapminder_2007.head()
```
You can see that observations are sorted in descending order from highest popultion to the lowest; now filter:

```{python}
gapminder_2007.iloc[0:10]
```


Another way of filtering rows is to use the `.query()` method. This is how you would filter observations from the African continent:

```{python}
gapminder_africa = gapminder_2007.query("continent == 'Africa'")
gapminder_africa.head()
```

Filter observations where life expectancy is equal to or greater 80 and the year is 2007; assign the results to `high_life_expect`:

```{python}
high_life_expect = gapminder.query("lifeExp >= 80 and year == 2007")

high_life_expect.head()
```


## Summary statistics and aggregating

One of the important task in data science is to explore the data using summary statistics. There are various methods used to summarise data, including:

| Summary stat                                  | pandas function |
|-----------------------------------------------|-----------------|
| Mean/average                                  | `.mean()`       |
| Median/mid-point                              | `.median()`     |
| Sum of values                                 | `.sum()`        |
| Minimum                                       | `.min()`        |
| Maximum                                       | `.max()`        |
| Standard deviation: spread/dispersion of data | `.std()`        |
| Count or total number of observations         | `.count()`      |


Let explore these functions. What is the average/mean life expectancy of all countries?

```{python}
gapminder["lifeExp"].mean()
```

What is the median GDP per capita?

```{python}
gapminder["gdpPercap"].median()
```

Find the minimum population:

```{python}
gapminder["pop"].min()
```

You can experiment with other functions listed in the above table.


### Grouping

In many cases, you may need to get summary statistics by a category or group. In above examples, although it is important to get the mean population of the world, but this tells us little about variaion in different regions. pandas has `.groupby()` function that group observations into categories. For example, you may be interested on finding the **average the GDP per capita** in each **continent**. Here you would use the `.groupby()` function, passing the "continent" column inside and follow by the summary statistics function:

```{python}
gapminder.groupby("continent")["gdpPercap"].mean()
```

The result show mean wealth (GDP per capita) by a continent. Wouldn't be nice to sort these statistics from highest to lowest?

```{python}
gapminder.groupby("continent")["gdpPercap"].mean().sort_values(ascending = False)
```

Now We can see that Oceania has the highest average wealth and Africa has the lowest. 

Sometimes you may need to find multiple summary statistics: mean, median, standard deviation, minimum,and maximum at the same time. `.agg()` function is able to do this:

```{python}
gapminder.groupby("continent")["gdpPercap"].agg(["mean", "median", "std", "min", "max"])
```
What if you want to find a summary stat of multiple columns? For example, find the mean pf these columns per continent: life expectancy, population, GDP per capita:


```{python}
gapminder.groupby("continent").agg(
    mean_life_expect = ("lifeExp", "mean"),
    mean_pop=("pop", "mean"),
    mean_gdp_pc = ("gdpPercap", "mean")
)
```

In this chapter you have learned about different ways of manipulating DataFrames. Next, we go to advanced methods.