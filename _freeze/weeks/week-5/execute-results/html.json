{
  "hash": "10770431478d3aa31f512d0bbe532b49",
  "result": {
    "markdown": "---\ntitle: \"Importing Data and Reproducible Workflows\"\ncode-copy: true\ncode-line-numbers: true\ntidy: true\n---\n\n\nAll along we have been working with data stored as packages in R or fake data. But most of the time data is stored locally on our computers either as .csv, Excel, .txt, pdf, etc. There are functions to import these data types, both in Base R and external packages. But first you will need to tell R the location of the data.\n\n## 6.1 Importing data\n\nTo import csv, you can use the `read.csv()` function. In my case I have dataset saved as \"epi_data.csv\" in the the folder named \"data\":\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- read.csv(\"data/epi_data.csv\")\n\nhead(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  country_code             country                   region population\n1          AFG         Afghanistan                     Asia  34.656032\n2          ALB             Albania Eastern Europe & Eurasia   2.876101\n3          DZA             Algeria  Mid East & North Africa  40.606052\n4          AGO              Angola       Sub-Saharan Africa  28.813463\n5          ATG Antigua and Barbuda                Caribbean   0.100963\n6          ARG           Argentina            Latin America  43.847430\n  pop_density        GDP epi_score sdg_index\n1    53.08341  60.287050     37.74      46.8\n2   104.96719  32.669916     65.46      68.9\n3    17.04889 565.284000     57.18      68.8\n4    23.11179 172.438000     37.44      50.2\n5   229.46136   2.121537     59.18   -9999.0\n6    16.02207 810.714000     59.30      72.5\n```\n:::\n:::\n\n\n\nLet us say te same data is saved in as aan Excel workbook with an extension .xlsx, we can use `reaedxl` package:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"reaedxl\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readxl)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'readxl' was built under R version 4.2.2\n```\n:::\n\n```{.r .cell-code}\nexcel_data <- read_excel(\"data/epi_data.xlsx\")\n\nhead(excel_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 8\n  country_code country  region population pop_density    GDP epi_score sdg_index\n  <chr>        <chr>    <chr>       <dbl>       <dbl>  <dbl>     <dbl>     <dbl>\n1 AFG          Afghani… Asia       34.7          53.1  60.3       37.7      46.8\n2 ALB          Albania  Easte…      2.88        105.   32.7       65.5      68.9\n3 DZA          Algeria  Mid E…     40.6          17.0 565.        57.2      68.8\n4 AGO          Angola   Sub-S…     28.8          23.1 172.        37.4      50.2\n5 ATG          Antigua… Carib…      0.101       229.    2.12      59.2   -9999  \n6 ARG          Argenti… Latin…     43.8          16.0 811.        59.3      72.5\n```\n:::\n:::\n\n\n\nThere are other arguments that can be added; for example if you data is on sheet number 2 of Exel workbook, you will add an `sheet = 2` argument. \n\n\nYou can import data from other statistical software as well:\n\n- Read STATA files: STATA data files end with .dta extensions: `read_dta()` from `Haven` package can import this data type\n\n- Read SPPS files: SPSS files end with .sav extension: `read_sav()` function, also from `Haven` can import it.\n\nR can import other many data types such shapefiles, images, PDFs and data from the web.\n\n\n## 6.2 Importing Multiple files\n\nSometimes there are many files and it would be time consuming to load each file. I will show you the following with instructions\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## First list the path where files are stored\n\npath <- list.files(\"data\", pattern = \".csv$\", full.names = TRUE) \n\n## Read all the files by using lapply function\ndata_files <- lapply(path, read.csv)\n```\n:::\n\n\nnow you have a list with 2 elements. You can extract each element:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfirst_df <- data_files[[1]]\n\nhead(first_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  country_code             country                   region population\n1          AFG         Afghanistan                     Asia  34.656032\n2          ALB             Albania Eastern Europe & Eurasia   2.876101\n3          DZA             Algeria  Mid East & North Africa  40.606052\n4          AGO              Angola       Sub-Saharan Africa  28.813463\n5          ATG Antigua and Barbuda                Caribbean   0.100963\n6          ARG           Argentina            Latin America  43.847430\n  pop_density        GDP epi_score sdg_index\n1    53.08341  60.287050     37.74      46.8\n2   104.96719  32.669916     65.46      68.9\n3    17.04889 565.284000     57.18      68.8\n4    23.11179 172.438000     37.44      50.2\n5   229.46136   2.121537     59.18   -9999.0\n6    16.02207 810.714000     59.30      72.5\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsecond_df <- data_files[[2]]\n\nhead(second_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      country continent year lifeExp      pop gdpPercap\n1 Afghanistan      Asia 1952  28.801  8425333  779.4453\n2 Afghanistan      Asia 1957  30.332  9240934  820.8530\n3 Afghanistan      Asia 1962  31.997 10267083  853.1007\n4 Afghanistan      Asia 1967  34.020 11537966  836.1971\n5 Afghanistan      Asia 1972  36.088 13079460  739.9811\n6 Afghanistan      Asia 1977  38.438 14880372  786.1134\n```\n:::\n:::\n\n        \n\n## 6.3 Exporting data\n\nAfter you have cleaned and prepared your data for analysis, you may want to save cleaned data. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder <- gapminder::gapminder\n\ngapminder_2007 <- gapminder |> \n  dplyr::filter(year == 2007)\n\nwrite.csv(gapminder_2007, \"data/gapminder_cleaned.csv\")\n```\n:::\n\n\nNot that your my path \"data/gapminder_cleaned.csv\" will be different yours. \n\n\n\n##6.4 Setting working directories\n\nWhen working on a project, it may be important to set a working directory, where all you files are stores: data, code, reports, etc. You can use `setwd()` function. Let's say we have a folder with all the files:\n\n- my_folder\n\n    - data\n    - code\n    - report\n    \nYou will need to set a working directory as:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsetwd(\"C:/Users/mpungosea/my_folder\")\n```\n:::\n\n\nTo navigate to a specific file, you will have to use relative paths. You starting path would be \"my_folder\". If you want to load data, you would have to navigate to \"data\" directory:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- read.csv(\"data/epi_data.csv\")\n\nhead(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  country_code             country                   region population\n1          AFG         Afghanistan                     Asia  34.656032\n2          ALB             Albania Eastern Europe & Eurasia   2.876101\n3          DZA             Algeria  Mid East & North Africa  40.606052\n4          AGO              Angola       Sub-Saharan Africa  28.813463\n5          ATG Antigua and Barbuda                Caribbean   0.100963\n6          ARG           Argentina            Latin America  43.847430\n  pop_density        GDP epi_score sdg_index\n1    53.08341  60.287050     37.74      46.8\n2   104.96719  32.669916     65.46      68.9\n3    17.04889 565.284000     57.18      68.8\n4    23.11179 172.438000     37.44      50.2\n5   229.46136   2.121537     59.18   -9999.0\n6    16.02207 810.714000     59.30      72.5\n```\n:::\n:::\n\n\n\n## 6.5 Managing reproducible workflows\n\nThe problem with the above approach, of setting working directories, is that your directories are local to your computer. We share code with other people: reviewers, team members, etc. We also collaborate with one another. Now imagine that I have \"C:/Users/mpungosea/my_folder\" as my working directory. Will this work on your computer? **NO!** In Other instances, you may move files; if you run the code and set the director, R will return an error. This means that your workflows are not reproducible and it is not an efficient way of working. \n\nEnter RStudio Projects. In Projects, we want to keep all the files that were working with and making it easier to navigate directories and share your work. To start a new project, follow these steps:\n\n\n![](images/week_5/r_project_1.png)\n\n![](images/week_5/r_project_2.png)\n![](images/week_5/r_project_3.png)\n![](images/week_5/r_project_4.png)\n![](images/week_5/r_project_5.png)\n\n\n\nInside the project, you can add the follwoing directories/folders:\n\n- data: to save all your data files: raw data, cleaned data, analysis data, etc\n\n- code: save all your scripts: data cleaning, analysis, etc\n\n- outputs: figures, tables, etc\n\n- reports: draft reports final reports, etc\n\n- bibliogaphy: a bibtex file with the list of references. \n\nIn one of my projects, this is how it looks:\n\n![](images/week_5/sample_project.png)\n\nEvery time you work on the project, you then open the `.Rproj` file, it will have all the files associated with the project:\n\n![](images/week_5/sample_project_2.png)",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}