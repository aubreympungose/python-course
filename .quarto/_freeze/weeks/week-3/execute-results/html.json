{
  "hash": "ee4066ce47bc2997dd129fe797af85a6",
  "result": {
    "markdown": "---\ntitle: \"4 Data Wrangling and Manipulation\"\ncode-copy: true\ncode-line-numbers: true\ntidy: true\ncode-annotations: below\n---\n\n\n\n# 4.1 PART I\n\n## Learning objectives\n\n-   Understand dataframes\n\n-   Manipulate, transform and analyse dataframes\n\n## 4.1.1 Introduction\n\nDataframes, as we saw [the previous section](/weeks/week-2.html), is a tabular data format, with columns and rows. Columns are *variable* names and rows are individual *observations*. \n\nLet us a basic data frame with three columns: country, life expectancy, and population of Southern African countries. First, we create individual vectors:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a character vector\ncountry_name <- c(\"Angola\", \"Botswana\", \"Lesotho\", \"Malawi\", \"Mozambique\", \"Namibia\", \"South Africa\", \"Swaziland\", \"Zambia\", \"Zimbabwe\")\n\ncountry_name\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"Angola\"       \"Botswana\"     \"Lesotho\"      \"Malawi\"       \"Mozambique\"  \n [6] \"Namibia\"      \"South Africa\" \"Swaziland\"    \"Zambia\"       \"Zimbabwe\"    \n```\n:::\n\n```{.r .cell-code}\n## Create a numeric vector\n\nlife_expectancy <- c(61.6, 61.1, 57.1, 53.1, 62.9, 59.3, 59.3, 62.3, 61.2, 59.3)\n\nlife_expectancy\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 61.6 61.1 57.1 53.1 62.9 59.3 59.3 62.3 61.2 59.3\n```\n:::\n\n```{.r .cell-code}\n## create another numeric vector\n\npopulation <- c(34500000, 2590000, 228000, 19890000, 32080000,  2530000, 59390000, 1190000, 19470000, 1599000)\n```\n:::\n\n\nBecause we have 3 vectors of equal length, we can create a dataframe, using a `data.frame()` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsouthern_africa_df <- data.frame(country_name, life_expectancy, population) #combine two vectors to create a dataframe\n\nsouthern_africa_df ## print the dataframe\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   country_name life_expectancy population\n1        Angola            61.6   34500000\n2      Botswana            61.1    2590000\n3       Lesotho            57.1     228000\n4        Malawi            53.1   19890000\n5    Mozambique            62.9   32080000\n6       Namibia            59.3    2530000\n7  South Africa            59.3   59390000\n8     Swaziland            62.3    1190000\n9        Zambia            61.2   19470000\n10     Zimbabwe            59.3    1599000\n```\n:::\n:::\n\n\nA dataframe is basically made of vectors (columns). In the `southern_africa_df` dataframe, we have 3 columns: `country_name`, `life_expectancy` `population`. We can extract these elements using the `$` sign:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsouthern_africa_df$country_name\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"Angola\"       \"Botswana\"     \"Lesotho\"      \"Malawi\"       \"Mozambique\"  \n [6] \"Namibia\"      \"South Africa\" \"Swaziland\"    \"Zambia\"       \"Zimbabwe\"    \n```\n:::\n\n```{.r .cell-code}\nsouthern_africa_df$life_expectancy\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 61.6 61.1 57.1 53.1 62.9 59.3 59.3 62.3 61.2 59.3\n```\n:::\n\n```{.r .cell-code}\nsouthern_africa_df$population\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 34500000  2590000   228000 19890000 32080000  2530000 59390000  1190000\n [9] 19470000  1599000\n```\n:::\n:::\n\n\n\n## 4.1.3 Using `dplyr`\n\nWe will use  the `dplyr` package to manipulate data. `dplyr` is part of `tidyverse` meta-package and is mostly used to clean, manipulate and transform dataframes. `dplyr` has 5 main verbs/functions:\n\n-   `select()`: for selecting particular columns in a dataframe\n\n-   `filter()`: for sub-setting rows based on the specified criteria\n\n-   `arrange()`: sort rows/observations based (ascending/descending)\n\n-   `summarise()`: for summary statistics\n\n-   `mutate()`: create new columns based on the manipulation of the existing columns.\n\n- `group_by()`: get aggregate statistics by a category\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'dplyr'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n:::\n:::\n\n\nYou can also load `dplyr` by loading the `tidyverse` package; this will load all the packages in in `tidyverse at once. This is useful, for example, when you want to clean and visualise data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.4.1     ✔ purrr   1.0.1\n✔ tibble  3.1.8     ✔ stringr 1.5.0\n✔ tidyr   1.3.0     ✔ forcats 1.0.0\n✔ readr   2.1.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n```\n:::\n:::\n\n\nNote that you will net to install tidyverse if you did not install it from the previous section:\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'tidyverse' is in use and will not be installed\n```\n:::\n:::\n\n\n\nLet us load the `gapminder` dataset that we used from the previous week. If you did not install, you will need to do so.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(gapminder)\n```\n:::\n\n\nThan assign it to the object, `gapminder`, using the `<-` operator:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder <- gapminder\n```\n:::\n\n\nWrite the following code to change the country and continent from factor to character, I will explain this in the next chapter:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder$country <- as.character(gapminder$country)\n\ngapminder$continent <- as.character(gapminder$continent)\n```\n:::\n\n\n\nNow you have an object, which is a dataframe, called `gapminder`, you can see it in the `Environment` pane in RStudio. It shows that it has `ncol(gapminder)` columns/variables and `nrow(gapminder)` observations/rows\n\n![`gapminder` dataframe in Environment pane](images/environment_pane.png)\n\nYou can use the `str()` fucntion to get the structure of the dataframe:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(gapminder)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntibble [1,704 × 6] (S3: tbl_df/tbl/data.frame)\n $ country  : chr [1:1704] \"Afghanistan\" \"Afghanistan\" \"Afghanistan\" \"Afghanistan\" ...\n $ continent: chr [1:1704] \"Asia\" \"Asia\" \"Asia\" \"Asia\" ...\n $ year     : int [1:1704] 1952 1957 1962 1967 1972 1977 1982 1987 1992 1997 ...\n $ lifeExp  : num [1:1704] 28.8 30.3 32 34 36.1 ...\n $ pop      : int [1:1704] 8425333 9240934 10267083 11537966 13079460 14880372 12881816 13867957 16317921 22227415 ...\n $ gdpPercap: num [1:1704] 779 821 853 836 740 ...\n```\n:::\n:::\n\n\nWe have 6 variables:\n\n- \"country\" \n\n- \"continent\" \n\n- \"year\"      \n\n- \"lifeExp\": life expectancy of a country  \n\n- \"pop\": population     \n\n- \"gdpPercap\": GDP per capita\n\nYou can get a sample of the first observations/rows using `head()` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(gapminder)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 6\n  country     continent  year lifeExp      pop gdpPercap\n  <chr>       <chr>     <int>   <dbl>    <int>     <dbl>\n1 Afghanistan Asia       1952    28.8  8425333      779.\n2 Afghanistan Asia       1957    30.3  9240934      821.\n3 Afghanistan Asia       1962    32.0 10267083      853.\n4 Afghanistan Asia       1967    34.0 11537966      836.\n5 Afghanistan Asia       1972    36.1 13079460      740.\n6 Afghanistan Asia       1977    38.4 14880372      786.\n```\n:::\n:::\n\n\n### 4.1.4 `select()` function\n\nWe may be interested in some of the columns in the `gampminder` dataframe, let say, for example, \"country\" and \"pop\" variables and discard others; we use the `select()` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nselect(gapminder, \"country\", \"pop\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,704 × 2\n   country          pop\n   <chr>          <int>\n 1 Afghanistan  8425333\n 2 Afghanistan  9240934\n 3 Afghanistan 10267083\n 4 Afghanistan 11537966\n 5 Afghanistan 13079460\n 6 Afghanistan 14880372\n 7 Afghanistan 12881816\n 8 Afghanistan 13867957\n 9 Afghanistan 16317921\n10 Afghanistan 22227415\n# ℹ 1,694 more rows\n```\n:::\n:::\n\n\nR return only the country and population variables. `select()` function only return the variables/columns we are interested in:\n\n![](images/visualise_select.png)\n\n\n### The pipe operator (`|>`)\n\nThe best way to work with R, esepcially tidyverse, is using the pipe (`|>`) operator. The pipe connect various tasks, for example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder |>\n  select(country, pop)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,704 × 2\n   country          pop\n   <chr>          <int>\n 1 Afghanistan  8425333\n 2 Afghanistan  9240934\n 3 Afghanistan 10267083\n 4 Afghanistan 11537966\n 5 Afghanistan 13079460\n 6 Afghanistan 14880372\n 7 Afghanistan 12881816\n 8 Afghanistan 13867957\n 9 Afghanistan 16317921\n10 Afghanistan 22227415\n# ℹ 1,694 more rows\n```\n:::\n:::\n\n\nThe pipe chains your operations. It says:\n\n- Take `gapminder` dataframe\n\n- Then using the `select()` function to select only pop and country columns\n\nYou will that pipe becomes important when having multiple chains of functions at once.\n\nYou will notice that in other sources: web, books, etc. have %>% instead of |>. It works the same way. The |> is new. %>% comes from `mgttr`, an external package, so you needed to load it first before using it. The  native pipe |> is built in R, so it there is no need to load it. So, we will stick with the |>.\n\nIn your RStudio, follow these instructions:\n\n- Go to 'Tools' and click on 'Global Options'\n\n- Navigate to 'Code' on the left pane\n\n- Then select the fourth option, \"use native pipe operator, |>\"\n\n- Click 'Apply'\n\nYou can use the short cut `Ctrl + Shift + M ` If you using Windows to insert the pipe instead of typing it. If you are using Mac, use `Cmd + Shift + M`. \n\n### 4.1.4 Return to `select()` function\n\nAs I have said, `select()` only return the columns specified\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder %>% \n  select(country, pop)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,704 × 2\n   country          pop\n   <chr>          <int>\n 1 Afghanistan  8425333\n 2 Afghanistan  9240934\n 3 Afghanistan 10267083\n 4 Afghanistan 11537966\n 5 Afghanistan 13079460\n 6 Afghanistan 14880372\n 7 Afghanistan 12881816\n 8 Afghanistan 13867957\n 9 Afghanistan 16317921\n10 Afghanistan 22227415\n# ℹ 1,694 more rows\n```\n:::\n:::\n\n\nAlso, notice that we selected \"country' and \"pop\" columns but did not save them and assigned to an object. To store the results into an object, we have to use assignment operator (`<-`):\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder_selected <- gapminder |>\n  select(country, pop)\n\ngapminder_selected # print\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,704 × 2\n   country          pop\n   <chr>          <int>\n 1 Afghanistan  8425333\n 2 Afghanistan  9240934\n 3 Afghanistan 10267083\n 4 Afghanistan 11537966\n 5 Afghanistan 13079460\n 6 Afghanistan 14880372\n 7 Afghanistan 12881816\n 8 Afghanistan 13867957\n 9 Afghanistan 16317921\n10 Afghanistan 22227415\n# ℹ 1,694 more rows\n```\n:::\n:::\n\n\nNow we have saved results as `gapminder_selected`, and we can do other analysis with this object because we have saved it. So, in a nutshell, when you run a code without assigning results into an object, using the `<-` operator, **results will not be saved but will be printed**.\n\nYou can also select columns based by index/position. Let us select only 1st and 3rd coulmns\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder |> \n  select(1, 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,704 × 2\n   country      year\n   <chr>       <int>\n 1 Afghanistan  1952\n 2 Afghanistan  1957\n 3 Afghanistan  1962\n 4 Afghanistan  1967\n 5 Afghanistan  1972\n 6 Afghanistan  1977\n 7 Afghanistan  1982\n 8 Afghanistan  1987\n 9 Afghanistan  1992\n10 Afghanistan  1997\n# ℹ 1,694 more rows\n```\n:::\n:::\n\n\nOr you can select a range of columns\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder |> \n  select(country:year)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,704 × 3\n   country     continent  year\n   <chr>       <chr>     <int>\n 1 Afghanistan Asia       1952\n 2 Afghanistan Asia       1957\n 3 Afghanistan Asia       1962\n 4 Afghanistan Asia       1967\n 5 Afghanistan Asia       1972\n 6 Afghanistan Asia       1977\n 7 Afghanistan Asia       1982\n 8 Afghanistan Asia       1987\n 9 Afghanistan Asia       1992\n10 Afghanistan Asia       1997\n# ℹ 1,694 more rows\n```\n:::\n:::\n\n\nHere, we have select columns from country to year only.\n\nYou can also exclude certain columns by simply adding the minus (-) sign; let say we want to exclude the `gdpPercap` from the dataframe\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder |> \n  select(-gdpPercap)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,704 × 5\n   country     continent  year lifeExp      pop\n   <chr>       <chr>     <int>   <dbl>    <int>\n 1 Afghanistan Asia       1952    28.8  8425333\n 2 Afghanistan Asia       1957    30.3  9240934\n 3 Afghanistan Asia       1962    32.0 10267083\n 4 Afghanistan Asia       1967    34.0 11537966\n 5 Afghanistan Asia       1972    36.1 13079460\n 6 Afghanistan Asia       1977    38.4 14880372\n 7 Afghanistan Asia       1982    39.9 12881816\n 8 Afghanistan Asia       1987    40.8 13867957\n 9 Afghanistan Asia       1992    41.7 16317921\n10 Afghanistan Asia       1997    41.8 22227415\n# ℹ 1,694 more rows\n```\n:::\n:::\n\n\n### 4.1.5 `filter()` function\n\nYou may be interested in observations/rows that meet certain conditions. We use `filter()` function to return the list that meet our conditions. `filter()` has several operators:\n\n- `==`: equal to\n\n- `!=`: not equal to\n\n- `>`: greater than\n\n- `<`: less than\n\n- `>=`: greater than or equal to\n\n- `<=`: less than or equal to\n\nLet us filter based on the continent column. How many continent are there? Create a basic table first\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(gapminder$continent)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n  Africa Americas     Asia   Europe  Oceania \n     624      300      396      360       24 \n```\n:::\n:::\n\n\nThere are five continents. Let us filter only observations from the African continent:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nafrica_gapminder <- gapminder |> \n  filter(continent == \"Africa\")\n\nafrica_gapminder  # print \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 624 × 6\n   country continent  year lifeExp      pop gdpPercap\n   <chr>   <chr>     <int>   <dbl>    <int>     <dbl>\n 1 Algeria Africa     1952    43.1  9279525     2449.\n 2 Algeria Africa     1957    45.7 10270856     3014.\n 3 Algeria Africa     1962    48.3 11000948     2551.\n 4 Algeria Africa     1967    51.4 12760499     3247.\n 5 Algeria Africa     1972    54.5 14760787     4183.\n 6 Algeria Africa     1977    58.0 17152804     4910.\n 7 Algeria Africa     1982    61.4 20033753     5745.\n 8 Algeria Africa     1987    65.8 23254956     5681.\n 9 Algeria Africa     1992    67.7 26298373     5023.\n10 Algeria Africa     1997    69.2 29072015     4797.\n# ℹ 614 more rows\n```\n:::\n:::\n\n\n\n`africa_gapminder` object is a dataframe we have just created, with only countries from the African continent. What `filter()` does is to return observations/rows that only meet our conditions:\n\n![](images/visualise_filter.png)\n\nLet us filter a numeric column; for example, we may want to filter countries with population of above 50 million and assign results to an object named high_pop:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhigh_pop <- gapminder |> \n  filter(pop > 50000000)\n\nhigh_pop ## print\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 190 × 6\n   country    continent  year lifeExp       pop gdpPercap\n   <chr>      <chr>     <int>   <dbl>     <int>     <dbl>\n 1 Bangladesh Asia       1957    39.3  51365468      662.\n 2 Bangladesh Asia       1962    41.2  56839289      686.\n 3 Bangladesh Asia       1967    43.5  62821884      721.\n 4 Bangladesh Asia       1972    45.3  70759295      630.\n 5 Bangladesh Asia       1977    46.9  80428306      660.\n 6 Bangladesh Asia       1982    50.0  93074406      677.\n 7 Bangladesh Asia       1987    52.8 103764241      752.\n 8 Bangladesh Asia       1992    56.0 113704579      838.\n 9 Bangladesh Asia       1997    59.4 123315288      973.\n10 Bangladesh Asia       2002    62.0 135656790     1136.\n# ℹ 180 more rows\n```\n:::\n:::\n\n\nYou can also combine 2 conditions. Let us say we want:\n\n- countries in Africa\n\n- the year 2007\n\n\n::: {.cell}\n\n```{.r .cell-code}\nafrica_2007 <- gapminder |> \n  filter(continent == \"Africa\", year == 2007)\n```\n:::\n\n\nFilter rows from the Africa OR Asia\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder |> \n  filter(continent == \"Africa\" | continent == \"Asia\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,020 × 6\n   country     continent  year lifeExp      pop gdpPercap\n   <chr>       <chr>     <int>   <dbl>    <int>     <dbl>\n 1 Afghanistan Asia       1952    28.8  8425333      779.\n 2 Afghanistan Asia       1957    30.3  9240934      821.\n 3 Afghanistan Asia       1962    32.0 10267083      853.\n 4 Afghanistan Asia       1967    34.0 11537966      836.\n 5 Afghanistan Asia       1972    36.1 13079460      740.\n 6 Afghanistan Asia       1977    38.4 14880372      786.\n 7 Afghanistan Asia       1982    39.9 12881816      978.\n 8 Afghanistan Asia       1987    40.8 13867957      852.\n 9 Afghanistan Asia       1992    41.7 16317921      649.\n10 Afghanistan Asia       1997    41.8 22227415      635.\n# ℹ 1,010 more rows\n```\n:::\n:::\n\n\nSometimes you may need to filter multiple rows, let say, more than 5 countries. It would be inconvinient to type `country == \"...\"` five times. This is where the `%in%` operator is useful:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nafrica_2007 |> \n  filter(country %in% c(\"South Africa\", \"Zimbabwe\", \"Ghana\", \"Tanzania\", \"Tunisia\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 6\n  country      continent  year lifeExp      pop gdpPercap\n  <chr>        <chr>     <int>   <dbl>    <int>     <dbl>\n1 Ghana        Africa     2007    60.0 22873338     1328.\n2 South Africa Africa     2007    49.3 43997828     9270.\n3 Tanzania     Africa     2007    52.5 38139640     1107.\n4 Tunisia      Africa     2007    73.9 10276158     7093.\n5 Zimbabwe     Africa     2007    43.5 12311143      470.\n```\n:::\n:::\n\n\n### 4.1.6 `arrange()` function\n\n`arrange()` function is self-explanatory: it sort values into ascending or descending order\n\n\n::: {.cell}\n\n```{.r .cell-code}\nafrica_2007 |> \n  arrange(lifeExp) |> \n  head(n = 10) ## show the first 10 observations\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 6\n   country                  continent  year lifeExp      pop gdpPercap\n   <chr>                    <chr>     <int>   <dbl>    <int>     <dbl>\n 1 Swaziland                Africa     2007    39.6  1133066     4513.\n 2 Mozambique               Africa     2007    42.1 19951656      824.\n 3 Zambia                   Africa     2007    42.4 11746035     1271.\n 4 Sierra Leone             Africa     2007    42.6  6144562      863.\n 5 Lesotho                  Africa     2007    42.6  2012649     1569.\n 6 Angola                   Africa     2007    42.7 12420476     4797.\n 7 Zimbabwe                 Africa     2007    43.5 12311143      470.\n 8 Central African Republic Africa     2007    44.7  4369038      706.\n 9 Liberia                  Africa     2007    45.7  3193942      415.\n10 Rwanda                   Africa     2007    46.2  8860588      863.\n```\n:::\n:::\n\n\nThe default sorting is ascending order; you can sort into descending order by using `desc()` function within `arrange()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nafrica_2007 |> \n  arrange(desc(lifeExp)) |> \n  head(n = 10) ## show the first 10 observations\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 6\n   country               continent  year lifeExp      pop gdpPercap\n   <chr>                 <chr>     <int>   <dbl>    <int>     <dbl>\n 1 Reunion               Africa     2007    76.4   798094     7670.\n 2 Libya                 Africa     2007    74.0  6036914    12057.\n 3 Tunisia               Africa     2007    73.9 10276158     7093.\n 4 Mauritius             Africa     2007    72.8  1250882    10957.\n 5 Algeria               Africa     2007    72.3 33333216     6223.\n 6 Egypt                 Africa     2007    71.3 80264543     5581.\n 7 Morocco               Africa     2007    71.2 33757175     3820.\n 8 Sao Tome and Principe Africa     2007    65.5   199579     1598.\n 9 Comoros               Africa     2007    65.2   710960      986.\n10 Mauritania            Africa     2007    64.2  3270065     1803.\n```\n:::\n:::\n\n\n### 4.1.7 `summarise()`\n\nWe use the `summarise()` function to get the summary statistics. Common statistics include mean, median, standard deviation, minimum, maximum, etc.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder |> \n  summarise(mean_life_exp = mean(lifeExp))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 1\n  mean_life_exp\n          <dbl>\n1          59.5\n```\n:::\n:::\n\n\nStandard deviation:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder |> \n  summarise(sd_life_exp = sd(lifeExp))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 1\n  sd_life_exp\n        <dbl>\n1        12.9\n```\n:::\n:::\n\n\nYou can get various summary statistics by combing multiple arguments within summarise():\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder |> \n  summarise(mean_life_exp = mean(lifeExp),   \n            sd_life_exp = sd(lifeExp),\n            min_life_exp = min(lifeExp),\n            max_life_exp = max(lifeExp))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 4\n  mean_life_exp sd_life_exp min_life_exp max_life_exp\n          <dbl>       <dbl>        <dbl>        <dbl>\n1          59.5        12.9         23.6         82.6\n```\n:::\n:::\n\n\nMagic! \n\n\n### 4.1.8 Aggregate  Statisitcs with `group_by()`\n\nIn many instances we are interested in aggregate statistics, that is, summary statistics by a category. Say you want to group rows by the continent column then get the use `summarise()` to get average GDP per capita for each continent. This is where the `group()` function is useful:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## First create a dataframe of the year 2007 only\n\ngapminder_2007 <- gapminder |> \n  filter(year == 2007)\n\n## Then use group_by()\n\ngapminder_2007 |> \n  group_by(continent) |> \n  summarise(gdp_continent = mean(gdpPercap)) |> \n  arrange(desc(gdp_continent))  ## arrange by gdp_continent into descending\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 2\n  continent gdp_continent\n  <chr>             <dbl>\n1 Oceania          29810.\n2 Europe           25054.\n3 Asia             12473.\n4 Americas         11003.\n5 Africa            3089.\n```\n:::\n:::\n\n\n\n### 4.1.9 Create columns with `mutate()`\n\nmutate create new columns based on the existing columns. In most cases we want to transform the data. For example, we know that the GDP per capita is calculated from dividing the total GDP by a population. We may want to create a new column named `gdp_total` with a formula (`gdp_total = gdpPercap * pop)`. We can use `mutate()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder_2007 <- gapminder_2007 |> \n  mutate(gdp_total = gdpPercap * pop)\n\nhead(gapminder_2007)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 7\n  country     continent  year lifeExp      pop gdpPercap     gdp_total\n  <chr>       <chr>     <int>   <dbl>    <int>     <dbl>         <dbl>\n1 Afghanistan Asia       2007    43.8 31889923      975.  31079291949.\n2 Albania     Europe     2007    76.4  3600523     5937.  21376411360.\n3 Algeria     Africa     2007    72.3 33333216     6223. 207444851958.\n4 Angola      Africa     2007    42.7 12420476     4797.  59583895818.\n5 Argentina   Americas   2007    75.3 40301927    12779. 515033625357.\n6 Australia   Oceania    2007    81.2 20434176    34435. 703658358894.\n```\n:::\n:::\n\n\nYou can see that the new column named `gdp_total` has been added. \n\nYou can also combine multiple arguments within `mutate()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder_2007 <- gapminder_2007 |> \n  mutate(gdp_total = gdpPercap * pop,\n         life_exp_squared = lifeExp ** 2)\n```\n:::\n\n  \n### Wraping all up\n\nThe pipe operator is very useful. You can chain multiple operations into a single code. Let say we want to do the following:\n\n- Find country called South Africa\n\n- find average life expectancy by year\n\n- Arrange by year into a descending order\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder |> \n  filter(country == \"South Africa\") |> \n  group_by(year) |> \n  summarise(life_exp = mean(lifeExp)) |> \n  arrange(desc(year))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 12 × 2\n    year life_exp\n   <int>    <dbl>\n 1  2007     49.3\n 2  2002     53.4\n 3  1997     60.2\n 4  1992     61.9\n 5  1987     60.8\n 6  1982     58.2\n 7  1977     55.5\n 8  1972     53.7\n 9  1967     51.9\n10  1962     50.0\n11  1957     48.0\n12  1952     45.0\n```\n:::\n:::\n\n\nYou can take it even further by creating a plot. You know that BRICS countries are Brazil, Russia, India, China and South Africa. You want to find trends in life expectancy. Note that there is no data for Russia\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder |> \n  filter(country %in% c(\"Brazil\", \"Russia\", \"India\", \"China\", \"South Africa\")) |> \n  select(country, year, lifeExp) |> \n  ggplot(aes(x = year, y = lifeExp, colour = country)) +\n  geom_line(linewidth = 1.5) +\n  theme_minimal() +\n  scale_x_continuous(breaks = c(1950, 1960, 1980, 1990, 2000, 2007)) +\n  theme(legend.position = \"bottom\",\n        panel.grid.minor = element_blank()) +\n  labs(title = \"Trends in life expectancy of BRICS country\",\n       x = \"\",\n       y = \"Life expectancy (in years)\",\n       caption = \"Data source: Gapminder\")\n```\n\n::: {.cell-output-display}\n![](week-3_files/figure-html/line_plot_sa-1.png){width=672}\n:::\n:::\n\n\nWait a minute: why did south Africa's life expectancy started to decline rapidly from the 1990s? One plausible reason would be the impact of HIV/AIDS and lack of antiretrovirals (ARVs). Welcome to data analysis.\n\nYou can see above the efficiency of the pipe operator.  Think of the pipe operator as:\n\n![](images/pipe.gif)\n\nOR\n\n![](images/pipe_bake.gif)\n\nWe have introduced to the basics of data manipulation in R using the `dplyr` package in R. While we have covered a lot, the path is long. However, once you master these basic functions, you will not struggle in the following sections. These resources may be helpful:\n\n- [R for Data Science](https://r4ds.hadley.nz/). Chapter 4 \n\n- [Data transformation with dplyr](https://github.com/rstudio/cheatsheets/blob/main/data-transformation.pdf)",
    "supporting": [
      "week-3_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}