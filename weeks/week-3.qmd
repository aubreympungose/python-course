---
title: "4 Data Wrangling and Manipulation"
code-copy: true
code-line-numbers: true
tidy: true
code-annotations: below
---


# 4.1 PART I

## Learning objectives

-   Understand DataFrames

-   Manipulate, transform and analyse DataFrames

## 4.1.1 Introduction

Dataframes, as we saw [the previous section](week-2.qmd), is a tabular data format, with columns and rows. Columns are *variable* names and rows are individual *observations*. Just like other data structures dicussed in previous chapters, a DataFrame handles different data types:
- int64: whole numbers (e.g age = 30)

- float64; numbers with decimals (e.g. height = 1.9, temperature = 33.0)

- datetime64: date and time

- category: catogories or factors (e.g. gender = male, female; race = black, white, ...)

- bool: True or False

- object: string and mixed data types


According to Hadley Wickman, a DataFrame should be in a *tidy* format:

> 1.  Each variable is a column; each column is a variable.
> 2.  Each observation is row; each row is an observation.
> 3.  Each value is a cell; each cell is a single value. 


The pandas package provide a toolbox of working analysing, querying and transforming DataFrames. We will continue working with the `gapminder dataset. First load pandas and read the data, saving it as "gapminder":

```{python}
import pandas as pd

gapminder = pd.read_csv("https://raw.githubusercontent.com/aubreympungose/data-science-course/main/weeks/data/gapminder.csv")

```


Let's examine the data by looking at few observations:

```{python}
gapminder.head()
```

You can check how many variables are in the data and what type of data:

```{python}
gapminder.info()
```

You can see that `gapminder` has 6 columns and 1704 rows. The columns in the dataset are:

- country: Simply the country

- continent: Continent

- year: The year data was collected

- lifeExp: Life expectancy of a country in year

- pop: Population of the country in a year

- gdpPercap: Gross Domestic Product of a country in a year


You can also print the columns in the dataset by using `.columns` attribute. 

```{python}
gapminder.columns
```
You can get the number of rows by using `.index` attribute:

```{python}
gapminder.index
```


## MANIPULATING COLUMNS

#### Access/Select columns

We may be interested in some of the columns in the `gampminder` dataframe, let say, for example, "country" only. You can select a specific column by taking  the name of the DataFrame, followed by square brackets (`[]`) and passing the name of the "column" inside square brackets:

```{python}
gapminder["country"]
```

To Access multiple, columns you follow the same method as above, except that you wrap column names list (`[]`), so you end up with double sqaure brackets. Let's say we want to select "country", "pop", and "year" columns:

```{python}
gapminder[["country", "pop", "year"]]
```


You can alse access columns by their index using `.iloc()` function. Remember that an index in Python starts at 0, for example, to access the first column

```{python}
gapminder.iloc[:, 0]
```

In the above code, the colon (`:`) specify that we want to retun all rows; you will more abouth this when selecting by both columns and rows.

To access multiple columns, you pass a list of indexes of columns. For example, select the 1st, 3rd and 5th columns:

```{python}
gapminder.iloc[:, [0, 2, 4]]
```

Suppose you want access a range of of columns, for example, from the 1st to the 3rd column:

```{python}
gapminder.iloc[:, 0:3]
```

### Rename columns

You may need to change column names. For example, in the `gapminder` dataset, we may change the "pop" column to population. You will use the `.rename()` function, pass the column argument, and specify column names within the dictionary (`{"old_name":"new_name"}`). We will assign the results to the new DataFrame named `gapminder_new`:

```{python}
gapminder_new = gapminder.rename(columns = {"pop":"population"})

gapminder_new.head()
```

The "pop" column has been changed to "population".

You can also rename multiple columns; in this case, rename "lifeExp" and "gdpPercap":

```{python}
gapminder_new = gapminder.rename(columns = {"lifeExp":"life_expectancy", "gdpPercap":"gdp_pc"})

gapminder_new.head()
```



