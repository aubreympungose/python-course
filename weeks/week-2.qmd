---
title: "3 Data Visualisation"
code-copy: true
code-line-numbers: true
tidy: true
code-annotations: true
---

## **Before We Begin**

## Base R vs External Packages


Until now, we have used functions within **Base R**, which are already installed in R. While Base/bulit-in R functions are important, however, in many cases, we want to use external packages to do any task we want. This also applies in other programming languages like Python. For example, if we want to do spatial and GIS analysis, we can install the `sf` package; for machine learning, we can use `caret` and `tidymodels` packages. There are over 2 000 R packages, contributed by different individuals around the world, and they are stored and curated in the [CRAN website](https://cran.r-project.org/web/packages/). In most of the cases, you will be working with external packages. 

One of the most popular packages in R is the `tidyverse` meta-package, which include a collection of packages for working with data; some of packages in the `tidyverse` are:

- `dplyr`: for data cleaning, wrangling and transformation

- `ggplot2`: for data visualisation

- `tidyr`: for tidying up data

- `readr`: for importing data

- `purrr`: for advanced functional programming

- `stringr`: for manipulating string/text data

There are other packages in the `tidyverse`. The philosophy of `tidyverse` is *tidy* data:

> 1.  Each variable is a column; each column is a variable.
> 2.  Each observation is row; each row is an observation.
> 3.  Each value is a cell; each cell is a single value. [@r_4_ds]


![Tidy data](images/tidy_data_2.png)

Tidy data is a principle we are going to stick on through this course:

![Tidy data @wickham_tidyverse_2019](images/tidy_data.png)

So all in all, tidyverse make it easier to work with dataframes and most people prefer it than base R functions. We will use an example at the end to understand the differences between Base R and `tydiverse.` You will need to install the package first. In R you install a package by calling `install.package()` function:

```{r install tidyverse, eval=F, echo=T}
install.packages("tidyverse")
```

Whenever you need to use an external package and its functions, you first need to load it using `library()` function. In our case, we want to load the tidyverse package we have just installed:

```{r load tidyverse, warning = FALSE}
library(tidyverse)
```

You will load other packages like this.


## 3.1 Introduction to data visualisation

Data visualisation is an important skill for data scientists. In fact, data manipulation and visualisations go hand in hand. Before any analysis, it is important to visualise data to explore its distribution, relationships, normality, etc.

In this section, we will use the `ggplot2` package within `tidyverse` to learn the foundations of data visualisation. The `ggplot2` package got it philosophy from the book _The Grammar of Graphics_, written by  Leland Wilkinson. The `ggplot2` package was developed by Hadley Wickham, probably one of the most greatest data scientist in this era. 

We will be working with the `gapminder` dataset, which is the real world data. You will need to install its first because it comes as a package:

```{r gapminder, eval=FALSE, echo=TRUE}
install.packages("gapminder")
```

After installing the `gapminder` data, you will have to load it using `library` function:

```{r load gapminder}
library(gapminder)
```

Remember that we said everything we create is an object and we need to assign it? Let us assign `gapminder` that and name simply as `gapminder` using the `<-` operator:

```{r}
gapminder <- gapminder

```


Explore the data first;  how many columns and rows are in `gapminder` dataframe? We will use `str()` function:

```{r}
str(gapminder)
```

We can see that `gapminder` has `r ncol(gapminder)` and `r nrow(gapminder)`. The columns in the dataset are:

- country: Simply the country

- continent: Continent

- year: The year data was collected

- lifeExp: Life expectancy of a country in year

- pop: Population of the country in a year

- gdpPercap: Gross Domestic Product of a country in a year


`ggplot2` has steps/processes you follow to create a plot. Let us illustrate using the `gapminder` dataset. Load `ggplot2` package first:

```{r ggplot-intro, warning=FALSE}
library(ggplot2)
```


A plot created in using `ggplot2` has the following components/layers, and we will go through them step-by-step: 

![source](images/ggplot_elements.png)

## 3.2 Create a plot
From the `ggapminder` dataframe, we will create a scatterplot of life expectancy and GDP per capita, and add all the components of ggplot step-by-step. 

### 3.2.1 Layer 1: data

We use the `ggplot()` function to add data, in this case, `gapminder` dataframe:

```{r ggplot-add data}
ggplot(data = gapminder)
```

### 3.2.2 Layer 2: aesthetics

Aesthetics are used to allocate x and y variables, depending on the type of the plot we want to create, in this case, x variable is `gdpPercap` and y variable is `lifeExp`:

```{r ggplot-add aesthetics}
ggplot(data = gapminder, aes(x = gdpPercap, y = lifeExp))
```

There are other *aesthetics* that we can add, such as *size, colour, shape, group, etc*. We will use these later in this section.

### 3.2.3 Layer 3: geometry

Geometry is the type of plot/object we want to create. In our casewe want to create a scatterplot, by using `geom_point()` function:

```{r ggplot-add geom}
ggplot(data = gapminder,
    aes(x = gdpPercap, y = lifeExp)) + 
    geom_point()
```

We now have our first plot. There other geometry types in ggplot depending on the type of data you have


- `geom_point()` : for sactterplots
    
- `geom_line()` : for line plots
    
- `geom_histogram()` : for histogram
    
- `geom_area()` : for area charts
    
- `geom_boxplot()`  : for boxplots
    
- `geom_bar()` : for bar graphs

In the code above, we have three steps to create a plot:

1. `ggplot(data = gapminder)`: we are simply telling ggplot that we are using gapminder dataset

2. `ggplot(data = gapminder, aes(x = gdpPercap, y = lifeExp))`: we are adding *mapping aesthetics* or *aesthetics*, allocating x, y axis. 

3. `ggplot(data = gapminder, aes(x = gdpPercap, y = lifeExp)) + geom_point()`: We have added a geometry layer through `geoms_point()` function to create a scatterplot. 


### 3.2.4 Layer  4: Labels

`ggplot2` package can handle various plot labels, including axis titles and graph titles. We can do this using `labs()` function:

```{r ggplot-labels}
ggplot(data = gapminder,
       aes(x = gdpPercap, y = lifeExp)) + 
  geom_point() +
  labs(x = "GDP per capita (log scale)",
       y = "Life expectancy",
       title = "GDP vs Life Expectancy (1952-2007)",
       subtitle = "People in developed countries tend to live longer",
       caption = "Data source: Gapminder")
```


### 3.2.5 Facets

Faceting is used when weâ€™d like to split a particular visualization by the values of another variable. This will create multiple copies of the same type of plot with matching x and y axes, but whose content will differ.

When we one to split the plots into various sub-categories, by using a categorical variable, we use `facet_wrap()` function. For example, we may want to split the above plot by continent:

```{r ggplot facet}
ggplot(data = gapminder,
       aes(x = gdpPercap, y = lifeExp)) + 
  geom_point() +
  facet_wrap(~continent)
```

There are other argument that comes with `facet_wrap()` function. We can specify tghe number of rows and columns, using `nrow()` and `ncol()` functions, respectively.

```{r ggplot facet2}
ggplot(data = gapminder,
       aes(x = gdpPercap, y = lifeExp)) + 
  geom_point() +
  facet_wrap(~continent, ncol = 5)
```


### 3.2.6 Transforming axis scales

Notice that x-axis is not normally distributed. One of the method to use is to transform data to log10, to normnalise it:

```{r ggplot scales log}
ggplot(data = gapminder,
    aes(x = gdpPercap, y = lifeExp)) + 
    geom_point() +
  scale_x_log10()
```

Look how it changes.

There are many scales functions and you will learn them along the way by coding and exploring ggplot.


### 3.2.7 Returning to aeathetics

We can add other aesthetics in our plot, for example, we can allocate colour to the `continent` column:

```{r ggplot aesthetics-colour}
ggplot(data = gapminder,
    aes(x = gdpPercap, y = lifeExp, colour = continent)) + 
    geom_point() +
  scale_x_log10()
```

Notice how countries in Europe tend to have higher GDP per capita and and higher life expectancy compared to African countries. 

We can also change the shape of points in the aesthetics:
```{r ggplot aesthetics-shape}
ggplot(data = gapminder,
    aes(x = gdpPercap, y = lifeExp, colour = continent, shape = continent)) + 
    geom_point() +
  scale_x_log10()
```

There are many other aesthetics arguments that are used and they are beyond the scope of this course. It takes practice. 

### 3.2.8 Themes

Try experimenting with different themes that comes with ggplot. `theme_minimal()` will produce a minimalist theme with less background:

```{r ggplot-change theme}
ggplot(data = gapminder,
       aes(x = gdpPercap, y = lifeExp, colour = continent)) + 
  geom_point() +
  scale_x_log10() +
  labs(x = "GDP per capita (log scale)",
       y = "Life expectancy",
       title = "GDP vs Life Expectancy (1952-2007)",
       subtitle = "People in developed countries tend to live longer",
       caption = "Data source: Gapminder") +
  theme_minimal()
```

There are other themes that can transform your plots to look more elegant.  

You can also choose the how fonts appear using `themes()` function:

```{r ggplot-theme change font}
ggplot(data = gapminder,
       aes(x = gdpPercap, y = lifeExp, colour = continent)) + 
  geom_point() +
  scale_x_log10() +
  labs(x = "GDP per capita (log scale)",
       y = "Life expectancy",
       title = "GDP vs Life Expectancy (1952-2007)",
       subtitle = "People in developed countries tend to live longer",
       caption = "Data source: Gapminder") +
  theme(text = element_text(size = 15))
```

With `themes()` function, you can remove borders, change the colour of fonts, remove the legend, etc. 


## 3.3 Visualising Numerical data

### 3.3.1 Single variable

For visualising one variable, we mostly histogram, density plot, etc:

Create a histogram of GDP per capita:

```{r ggplot-histogram}
ggplot(data = gapminder, aes(gdpPercap)) +
  geom_histogram()
```

We can see that the GDP per capita variable is skewed. Density plots are also similar to histograms:

```{r ggplot-density}
ggplot(data = gapminder, aes(gdpPercap)) +
  geom_density()
```

### 3.3.2 Visualising more than one numerical variables

A scatter plot is used to show relationship between two variables

```{r ggplot-scatter}
ggplot(data = gapminder, aes(x = gdpPercap, y = lifeExp)) + 
    geom_point()
```

We can add other aeasthetics such as shape, colour etc: Let's add the colour aesthetics:

```{r ggplot-scatter-colour}
ggplot(data = gapminder, aes(x = gdpPercap, y = lifeExp, colour = continent)) + 
    geom_point()
```

We can change the add the size aesthetics and use population of the country:

```{r ggplot-scatter-size}
ggplot(data = gapminder, aes(x = gdpPercap, y = lifeExp, colour = continent, size = pop)) + 
  geom_point()
```

### 3.3.3 Visualising numerical by group/category

A boxplot is useful when we want to view statistics by a particular group, let say, GDP by continent:

```{r ggplot-boxplot}
ggplot(data = gapminder, aes(x = continent, y = gdpPercap)) +
  geom_boxplot()
```

We can also use a column chart, let say, view GDP per capita by continent:

```{r geom-col}
ggplot(data = gapminder, aes(x = continent, y = gdpPercap)) +
  geom_col()
```

### 3.3.4 visualise trends

We mainly use line graphs to visualise statistics over time. Let use see how life expectancy changes over time 

```{r geom-line}
ggplot(data = gapminder, aes(x = year, y = lifeExp, group = country)) +
  geom_line()
```


This looks ugly, but we will learn how to create proper line plots at the end. 

You can also use stacked column chart:

```{r stacked column}
ggplot(data = gapminder, aes(x = year, y = pop, fill = continent)) +
  geom_col()
```

View by continent and make it 100% stacked bar

```{r stacked hundred percent}
ggplot(data = gapminder, aes(x = year, y = pop, fill = continent)) +
  geom_col(position = "fill")
```

You can make horizontal bars by using `coord_flip()`:

```{r coord_flip}
ggplot(data = gapminder, aes(x = year, y = pop, fill = continent)) +
  geom_col(position = "fill") +
  coord_flip()
```


## 3.4 Visualising categorical/character data

In the gapminder dataset, we have two categorical columns: country and continent. One of the plot used for handling categorical data is bar chart. In ggplot, we use `geom_bar`:

```{r bar-chart}
ggplot(data = gapminder, aes(x = continent)) + 
  geom_bar()
```


### Bonus one: Interactive charts

You can make your charts interactive by using `plotly` package, you will need to install it first

```{r install plotly, eval=F, echo=T}
install.packages(plotly)
```

Then load the package:

```{r load plotly, warning=FALSE}
library(plotly)
```

First, create a plot using `ggplot()` and save it using the `<-` operator:

```{r}
first_plot <- ggplot(data = gapminder,
       aes(x = gdpPercap, y = lifeExp, colour = continent)) + 
  geom_point() +
  scale_x_log10() +
  labs(x = "GDP per capita (log scale)",
       y = "Life expectancy",
       title = "GDP vs Life Expectancy (1952-2007)",
       subtitle = "People in developed countries tend to live longer",
       caption = "Data source: Gapminder") +
  theme_minimal() 
```

We named the plot first_plot. From the `plotly` package, you going to use `ggplotly()` function and put the plot object you have created:

```{r}
ggplotly(first_plot)
```

Experiment with the results, when you hoover around the plot, you can see it shows information by variable. You can select which continent to make visible by clicking on the legend. Beautiful!

### Bonus Two: Animate

You can create an animated chart using the `gganimate` package. Install first:

```{r install gganimate, eval=F, echo=T}
install.packages(gganimate)
```

Load the package:

```{r load gganimate, warning=FALSE}
library(gganimate)
```

You would want to see how the life expectancy and gdp per capita changes over time. First create the plot, but add few functions:


```{r}
animated_plot <- ggplot(data = gapminder,
       aes(x = gdpPercap, 
           y = lifeExp, 
           size = pop,
           colour = continent)) + 
  geom_point() +
  scale_x_log10() +
  labs(x = "GDP per capita (log scale)",
       y = "Life expectancy",
       title = "GDP vs Life Expectancy (1952-2007)",
       subtitle = 'Year: {frame_time}',
       caption = "Data source: Gapminder") +
  theme_minimal() +
  transition_time(year) +
  ease_aes('linear') 


animate(animated_plot)
```

Look at the results!


This section introduced you to basics of data visualisation using ggplot2 package. You may need to consult the following materials for intermediate and advanced skills in data visualisation:

- [Healy, K. (2018). Data visualization: a practical introduction. Princeton University Press](https://socviz.co/)

- [The R Graph Gallery](https://r-graph-gallery.com/)

- [R for Data Science](https://r4ds.hadley.nz/). Chapter 10-12

- [Data visualisation with ggplot2: cheatsheet](https://github.com/rstudio/cheatsheets/blob/main/data-visualization-2.1.pdf)

