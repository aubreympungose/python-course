{"title":"5 Data Manipulation Part 2","markdown":{"yaml":{"title":"5 Data Manipulation Part 2","code-copy":true,"code-line-numbers":true,"tidy":true,"code-annotations":"below"},"headingText":"5.1 Renaming columns","containsRefs":false,"markdown":"\n\nLast week we introduced the basics of data manipulation using `dplyr`. This week I want u to continue to intermediate data manipulation in `dplyr`. \n\n\n\nYou will notice that the column names in the `gapminder` dataset do not follow *tidy* principles. Naming things in a *tidy* we follow these principles:\n\n- No spaces between characters\n\n- all names should be in lower cases\n\n- only use underscore (_) to separate characters.\n\nThe [tidyverse style guide](https://style.tidyverse.org/). In our columns, the column names `lifeExp` are `gdpPercap` need to be renamed. We will use `rename()` function within `dplyr`:\n\n```{r, warning=FALSE}\n\n### Load tidyverse\n\nlibrary(tidyverse)\n\n### load the data\n\ngapminder <- gapminder::gapminder\n\ngapminder$country <- as.character(gapminder$country)\n\ngapminder$continent <- as.character(gapminder$continent)\n```\n\nthen use `rename()` to change column names; we will save the new dataframe as `gapminder_new`\n\n```{r}\n\ngapminder_new <- gapminder |> \n  rename(life_expectancy = lifeExp,\n         gdp_per_capita = gdpPercap)\n\nhead(gapminder_new)\n```\n\nThe dataframe is updated with changed column names. However, when working with data with many columns, it would be time consuming to change each column. Fortunately, within the package `janitor` there is function called `clean_names` that change all the column names into a tidy way. Install the janitor package first:\n\n```{r, eval=FALSE}\n\ninstall.packages(\"janitor\")\n```\n\nAfter install it load it: and use the `clean_names()` function:\n\n```{r, warning=FALSE}\nlibrary(janitor)\n\ngapminder_new <- clean_names(gapminder)\n\nhead(gapminder_new)\n```\n\nSee that untidy column names were changed automatically.\n\n## 5.2 Converting column data types\n\nRemember we discussed 3 data types:\n\n- character\n\n- numeric\n\n- logical\n\nIn a dataframe, you can find the data type of the column by using `class()` function\n\n```{r}\nclass(gapminder$country)\n\nclass(gapminder$gdpPercap)\n```\n\nYou can also use the `str()` to find the data types of all columns in the dataframe:\n\n```{r}\nstr(gapminder)\n```\n\nSometimes you may find that the all values in a column would be saved as character when they are supposed to be numeric. You can change them as using `as.numeric()` function. Let us simulate some fake data:\n\n\n```{r}\ngender <- c(\"male\", \"female\", \"female\", \"male\", \"female\")\n\nage <- c(\"18\", \"30\", \"45\", \"21\", \"54\")\n\nexample_df <- data.frame(gender, age)\n\nexample_df\n```\n\nIn the example_df dataframe, you can see that the age column has been stored as character, which doesn't make any sense:\n\n```{r}\nstr(example_df$age)\n```\n\nConvert this:\n\n```{r}\nexample_df$age <- as.numeric(example_df$age)\n\nstr(example_df$age)\n```\n\nIf you want to convert it back to character, you can use `as.character()` function:\n\n```{r}\nexample_df$age <- as.character(example_df$age)\n\nstr(example_df$age)\n```\n\nThe only time this will not work is when you try to convert a character column such as `gender` into numeric; try it. Experiment with converting various column type with the gapminder dataset.\n\n### 5.2.1 Factors\n\nThere is another data type we have not discussed: factors or what may be called categorical data. Factors are like characters, except that they have integers that correspond to characters. In our example_df dataframe, we may want to make the column gender a factor, where 1 = male, 2 = female.\n\n```{r}\n\nhead(example_df)\n\nexample_df$gender <- factor(example_df$gender, levels = c(\"male\", \"female\"))\n\nstr(example_df)\n```\n\nThe gender column has been changed to factor, with 2 levels. \n\nLet us try to change the continent column in the gapminder dataset, we will try the `dplyr` method:\n\n```{r}\ngapminder <- gapminder |> \n  mutate(continent_factor = factor(continent))\n\nstr(gapminder$continent_factor)\n```\nHere we have used `mutate()` to create a new column named `continent_factor` that is a factor. It has 5 levels, you can check this using the `levels()` function:\n\n```{r}\nlevels(gapminder$continent_factor)\n```\n\nCreating new columns instead of changing the existing one is important in some instances, especially when you want to compare the data. \n\nThe [`focrcats` package](https://forcats.tidyverse.org/) within `Tidyverse` was specifically create for factors, you may want to visit it to learn more about factors. \n\n## 5.3 Create a new categorical column from a numeric column\n\nIn many cases, we may want to create a new categorical column that takes the conditions from a numeric column. For example, example, in the following ages:\n\n- 1-12 = child\n\n- 13-17 = adolescent\n\n- 18-34 = young adults\n\n- 35-55 = adults\n\n- Over 55 = older adults\n\nWe can use the `case_when()` function within `mutate()` to create this column. Let us generate some fake data;\n\n```{r}\nset.seed(45)\n###simulate a character vector with a length of 50\ngender <- sample(c(\"male\", \"female\"), size = 50, replace = T, prob = c(.45, .55))\n\n\n## simulate a numeric vector, with a length of 50, from ages 1 to 75\nage <- sample(1:75, size = 50)\n\nfake_df <- tibble(gender, age)\n\nhead(fake_df)\n```\n\nThen compute a new column:\n\n```{r}\nfake_df <- fake_df |> \n  mutate(age_group = case_when(\n    age >= 1 & age <=12 ~ \"child\",\n    age >= 13 & age <= 17 ~ \"adolescent\",\n    age >= 18 & age <= 34 ~ \"young adult\",\n    age >= 35 & age <= 55 ~ \"adult\",\n    age > 55 ~ \"older adult\"\n  ))\n\nfake_df\n```\n\nPlot the new column:\n\n```{r}\nfake_df |> \n  ggplot(aes(x = age_group)) +\n  geom_bar() +\n  theme_minimal()\n```\n\n\nWe have created a new column called `age_group` using the age column. \n\nExperiment with the gapminder data. We may want to group countries according to their life expectancy based on the following rules:\n\n- if life expectancy of a country is lower than the world average, we will classify it as 'low life expectancy'\n\n- if life expectancy of a country is higher than the world average, we will classify it as 'high life expectancy'\n\nWe will only use observations from the year 2007:\n\n```{r}\ngapminder_2007 <- gapminder |> \n  filter(year == 2007)\n```\n\nCreate a new column:\n\n```{r}\ngapminder_2007 <- gapminder_2007 |> \n  mutate(life_expect_category = case_when(\n    lifeExp < mean(lifeExp) ~ 'low life expectancy',\n    lifeExp > mean(lifeExp) ~ 'high life expectancy'\n  ))\n```\n\nWe have created added a new column called `life_expect_category`; plot this column:\n\n```{r}\ngapminder_2007 |> \n  ggplot(aes(x = life_expect_category)) +\n  geom_bar() +\n  theme_minimal()\n```\n\n### 5.4 Missing data\n\nData rarely comes clean, and sometimes data can contain missing value. In R missing values are stored as `NA`. Once we go to the introduction to  statistics section, we will deal with missing values.\n\n\n### 5.5 Reshaping data\n\nThere are 2 types of dataframes: wide and long formats. I will use examples to illustrate both types. \n\nSuppose we have data containing GDP increase rate of South Africa from 2010 to 2020 Let us create a _long_ format of this dataframe:\n\n```{r}\nyear <- c(2010:2020)\n  \ngdp_rate <- c(2.8, 3.1, 3.3, 2.2, 1.9, 1.3, 1.5, 0.6, 0.8, 0.2, -7.0)\n\nsa_gdp_long <- data.frame(year, gdp_rate)\n\nsa_gdp_long\n```\n\nThe dataframe is in long format: We have one column reprenting all years, and gdp_rate column representing all values of GDP growth rate. What if we want to change to a _wide_ format? We can use `pivot_wider()` function within `tidyr` package, also a part of `tydiverse`:\n\n```{r}\nsa_gdp_wide <- pivot_wider(sa_gdp_long,  names_from = year, values_from = gdp_rate)\n\nsa_gdp_wide\n```\n\nYou can see that in a wide format, each year is a column.\n\n### 5.5.1 Excercise\n\nIn the gapminder data do the following:\n\n- Select country, year and life expectancy columns\n\n- filter rows rows from South Africa, Zimbabwe and Mozambique\n\n- reshape this data to a wide format\n\n## 5.6 Joining data\n\nYou my have 2 dataframes with corresponding ID columns but with other different column names. Create a first dataframe:\n\n```{r}\n\ncountry_name <- c(\"South Africa\", \"Zimbabwe\", \"Mozambique\", \"Botswana\", \"Eswatini\", \"Lesotho\", \"Namibia\")\n\nset.seed(187)\npopulation <- sample(5000:15000, 7)\n\npop_df <- data.frame(country_name, population)\n\npop_df\n```\n\nCreate a second dataframe:\n\n```{r}\ncountry_name <- c(\"South Africa\", \"Zimbabwe\", \"Mozambique\", \"Botswana\", \"Eswatini\", \"Lesotho\", \"Namibia\")\n\nset.seed(50)\navg_age <- sample(23:35, 7)\n\nage_df <- data.frame(country_name, avg_age)\n\nage_df\n```\n\nNow we have 2 data frames: pop_df with a fake data on countries' population and the age_df with a fake data on countries' average age. The common name in both dataframes is `country_name`. We will use `merge()` function to join 2 dataframes:\n\n```{r}\ncombined_df <- merge(pop_df, age_df, by = \"country_name\")\n\ncombined_df\n```\n\nBingo!\n\nThere is more to joining data: `merge()` is a Base R funcion. There are other options of joining data using `dplyr`; see [this guide](https://dplyr.tidyverse.org/reference/mutate-joins.html)\n\n\n\n\n\n\n","srcMarkdownNoYaml":"\n\nLast week we introduced the basics of data manipulation using `dplyr`. This week I want u to continue to intermediate data manipulation in `dplyr`. \n\n\n## 5.1 Renaming columns\n\nYou will notice that the column names in the `gapminder` dataset do not follow *tidy* principles. Naming things in a *tidy* we follow these principles:\n\n- No spaces between characters\n\n- all names should be in lower cases\n\n- only use underscore (_) to separate characters.\n\nThe [tidyverse style guide](https://style.tidyverse.org/). In our columns, the column names `lifeExp` are `gdpPercap` need to be renamed. We will use `rename()` function within `dplyr`:\n\n```{r, warning=FALSE}\n\n### Load tidyverse\n\nlibrary(tidyverse)\n\n### load the data\n\ngapminder <- gapminder::gapminder\n\ngapminder$country <- as.character(gapminder$country)\n\ngapminder$continent <- as.character(gapminder$continent)\n```\n\nthen use `rename()` to change column names; we will save the new dataframe as `gapminder_new`\n\n```{r}\n\ngapminder_new <- gapminder |> \n  rename(life_expectancy = lifeExp,\n         gdp_per_capita = gdpPercap)\n\nhead(gapminder_new)\n```\n\nThe dataframe is updated with changed column names. However, when working with data with many columns, it would be time consuming to change each column. Fortunately, within the package `janitor` there is function called `clean_names` that change all the column names into a tidy way. Install the janitor package first:\n\n```{r, eval=FALSE}\n\ninstall.packages(\"janitor\")\n```\n\nAfter install it load it: and use the `clean_names()` function:\n\n```{r, warning=FALSE}\nlibrary(janitor)\n\ngapminder_new <- clean_names(gapminder)\n\nhead(gapminder_new)\n```\n\nSee that untidy column names were changed automatically.\n\n## 5.2 Converting column data types\n\nRemember we discussed 3 data types:\n\n- character\n\n- numeric\n\n- logical\n\nIn a dataframe, you can find the data type of the column by using `class()` function\n\n```{r}\nclass(gapminder$country)\n\nclass(gapminder$gdpPercap)\n```\n\nYou can also use the `str()` to find the data types of all columns in the dataframe:\n\n```{r}\nstr(gapminder)\n```\n\nSometimes you may find that the all values in a column would be saved as character when they are supposed to be numeric. You can change them as using `as.numeric()` function. Let us simulate some fake data:\n\n\n```{r}\ngender <- c(\"male\", \"female\", \"female\", \"male\", \"female\")\n\nage <- c(\"18\", \"30\", \"45\", \"21\", \"54\")\n\nexample_df <- data.frame(gender, age)\n\nexample_df\n```\n\nIn the example_df dataframe, you can see that the age column has been stored as character, which doesn't make any sense:\n\n```{r}\nstr(example_df$age)\n```\n\nConvert this:\n\n```{r}\nexample_df$age <- as.numeric(example_df$age)\n\nstr(example_df$age)\n```\n\nIf you want to convert it back to character, you can use `as.character()` function:\n\n```{r}\nexample_df$age <- as.character(example_df$age)\n\nstr(example_df$age)\n```\n\nThe only time this will not work is when you try to convert a character column such as `gender` into numeric; try it. Experiment with converting various column type with the gapminder dataset.\n\n### 5.2.1 Factors\n\nThere is another data type we have not discussed: factors or what may be called categorical data. Factors are like characters, except that they have integers that correspond to characters. In our example_df dataframe, we may want to make the column gender a factor, where 1 = male, 2 = female.\n\n```{r}\n\nhead(example_df)\n\nexample_df$gender <- factor(example_df$gender, levels = c(\"male\", \"female\"))\n\nstr(example_df)\n```\n\nThe gender column has been changed to factor, with 2 levels. \n\nLet us try to change the continent column in the gapminder dataset, we will try the `dplyr` method:\n\n```{r}\ngapminder <- gapminder |> \n  mutate(continent_factor = factor(continent))\n\nstr(gapminder$continent_factor)\n```\nHere we have used `mutate()` to create a new column named `continent_factor` that is a factor. It has 5 levels, you can check this using the `levels()` function:\n\n```{r}\nlevels(gapminder$continent_factor)\n```\n\nCreating new columns instead of changing the existing one is important in some instances, especially when you want to compare the data. \n\nThe [`focrcats` package](https://forcats.tidyverse.org/) within `Tidyverse` was specifically create for factors, you may want to visit it to learn more about factors. \n\n## 5.3 Create a new categorical column from a numeric column\n\nIn many cases, we may want to create a new categorical column that takes the conditions from a numeric column. For example, example, in the following ages:\n\n- 1-12 = child\n\n- 13-17 = adolescent\n\n- 18-34 = young adults\n\n- 35-55 = adults\n\n- Over 55 = older adults\n\nWe can use the `case_when()` function within `mutate()` to create this column. Let us generate some fake data;\n\n```{r}\nset.seed(45)\n###simulate a character vector with a length of 50\ngender <- sample(c(\"male\", \"female\"), size = 50, replace = T, prob = c(.45, .55))\n\n\n## simulate a numeric vector, with a length of 50, from ages 1 to 75\nage <- sample(1:75, size = 50)\n\nfake_df <- tibble(gender, age)\n\nhead(fake_df)\n```\n\nThen compute a new column:\n\n```{r}\nfake_df <- fake_df |> \n  mutate(age_group = case_when(\n    age >= 1 & age <=12 ~ \"child\",\n    age >= 13 & age <= 17 ~ \"adolescent\",\n    age >= 18 & age <= 34 ~ \"young adult\",\n    age >= 35 & age <= 55 ~ \"adult\",\n    age > 55 ~ \"older adult\"\n  ))\n\nfake_df\n```\n\nPlot the new column:\n\n```{r}\nfake_df |> \n  ggplot(aes(x = age_group)) +\n  geom_bar() +\n  theme_minimal()\n```\n\n\nWe have created a new column called `age_group` using the age column. \n\nExperiment with the gapminder data. We may want to group countries according to their life expectancy based on the following rules:\n\n- if life expectancy of a country is lower than the world average, we will classify it as 'low life expectancy'\n\n- if life expectancy of a country is higher than the world average, we will classify it as 'high life expectancy'\n\nWe will only use observations from the year 2007:\n\n```{r}\ngapminder_2007 <- gapminder |> \n  filter(year == 2007)\n```\n\nCreate a new column:\n\n```{r}\ngapminder_2007 <- gapminder_2007 |> \n  mutate(life_expect_category = case_when(\n    lifeExp < mean(lifeExp) ~ 'low life expectancy',\n    lifeExp > mean(lifeExp) ~ 'high life expectancy'\n  ))\n```\n\nWe have created added a new column called `life_expect_category`; plot this column:\n\n```{r}\ngapminder_2007 |> \n  ggplot(aes(x = life_expect_category)) +\n  geom_bar() +\n  theme_minimal()\n```\n\n### 5.4 Missing data\n\nData rarely comes clean, and sometimes data can contain missing value. In R missing values are stored as `NA`. Once we go to the introduction to  statistics section, we will deal with missing values.\n\n\n### 5.5 Reshaping data\n\nThere are 2 types of dataframes: wide and long formats. I will use examples to illustrate both types. \n\nSuppose we have data containing GDP increase rate of South Africa from 2010 to 2020 Let us create a _long_ format of this dataframe:\n\n```{r}\nyear <- c(2010:2020)\n  \ngdp_rate <- c(2.8, 3.1, 3.3, 2.2, 1.9, 1.3, 1.5, 0.6, 0.8, 0.2, -7.0)\n\nsa_gdp_long <- data.frame(year, gdp_rate)\n\nsa_gdp_long\n```\n\nThe dataframe is in long format: We have one column reprenting all years, and gdp_rate column representing all values of GDP growth rate. What if we want to change to a _wide_ format? We can use `pivot_wider()` function within `tidyr` package, also a part of `tydiverse`:\n\n```{r}\nsa_gdp_wide <- pivot_wider(sa_gdp_long,  names_from = year, values_from = gdp_rate)\n\nsa_gdp_wide\n```\n\nYou can see that in a wide format, each year is a column.\n\n### 5.5.1 Excercise\n\nIn the gapminder data do the following:\n\n- Select country, year and life expectancy columns\n\n- filter rows rows from South Africa, Zimbabwe and Mozambique\n\n- reshape this data to a wide format\n\n## 5.6 Joining data\n\nYou my have 2 dataframes with corresponding ID columns but with other different column names. Create a first dataframe:\n\n```{r}\n\ncountry_name <- c(\"South Africa\", \"Zimbabwe\", \"Mozambique\", \"Botswana\", \"Eswatini\", \"Lesotho\", \"Namibia\")\n\nset.seed(187)\npopulation <- sample(5000:15000, 7)\n\npop_df <- data.frame(country_name, population)\n\npop_df\n```\n\nCreate a second dataframe:\n\n```{r}\ncountry_name <- c(\"South Africa\", \"Zimbabwe\", \"Mozambique\", \"Botswana\", \"Eswatini\", \"Lesotho\", \"Namibia\")\n\nset.seed(50)\navg_age <- sample(23:35, 7)\n\nage_df <- data.frame(country_name, avg_age)\n\nage_df\n```\n\nNow we have 2 data frames: pop_df with a fake data on countries' population and the age_df with a fake data on countries' average age. The common name in both dataframes is `country_name`. We will use `merge()` function to join 2 dataframes:\n\n```{r}\ncombined_df <- merge(pop_df, age_df, by = \"country_name\")\n\ncombined_df\n```\n\nBingo!\n\nThere is more to joining data: `merge()` is a Base R funcion. There are other options of joining data using `dplyr`; see [this guide](https://dplyr.tidyverse.org/reference/mutate-joins.html)\n\n\n\n\n\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":true,"code-line-numbers":true,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","filters":["../include-files.lua","quarto"],"css":["../styles.css"],"toc":true,"output-file":"week-4.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.433","theme":{"light":"cosmo","dark":["cosmo","../theme-dark.scss"]},"code-background":true,"code-copy":true,"title":"5 Data Manipulation Part 2","tidy":true,"code-annotations":"below"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}